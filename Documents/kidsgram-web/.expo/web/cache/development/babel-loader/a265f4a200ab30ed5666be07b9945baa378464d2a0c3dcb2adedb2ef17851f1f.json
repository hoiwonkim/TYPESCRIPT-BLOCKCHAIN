{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport \"react-native-gesture-handler\";\nimport * as Font from \"expo-font\";\nimport AppLoading from \"expo-app-loading\";\nimport Ionicons from \"@expo/vector-icons/Ionicons\";\nimport LoggedInNavigation from \"./navigators/LoggedInNavigation\";\nimport LoggedOutNavigation from \"./navigators/LoggedOutNavigation\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport client, { isLoggedInVar, tokenVar, cache, isDarkModeVar } from \"./apollo\";\nimport { Asset } from \"expo-asset\";\nimport { useEffect, useState } from \"react\";\nimport { darkTheme, lightTheme } from \"./styles/themes\";\nimport { ThemeProvider } from \"styled-components/native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { ApolloProvider, useReactiveVar } from \"@apollo/client\";\nimport Appearance from \"react-native-web/dist/exports/Appearance\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { AsyncStorageWrapper, persistCache } from \"apollo3-cache-persist\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar App = function App() {\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    loading = _useState2[0],\n    setLoading = _useState2[1];\n  var isLoggedIn = useReactiveVar(isLoggedInVar);\n  var isDarkMode = useReactiveVar(isDarkModeVar);\n  var startAsync = function startAsync() {\n    var colorSchemeName, token, ioniconsFontArray, loadedIoniconsFont, imageArray, loadedImage;\n    return _regeneratorRuntime.async(function startAsync$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          colorSchemeName = Appearance.getColorScheme();\n          isDarkModeVar(colorSchemeName === \"light\" ? \"light\" : \"dark\");\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"token\"));\n        case 4:\n          token = _context.sent;\n          if (token) {\n            isLoggedInVar(true);\n            tokenVar(token);\n          }\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(persistCache({\n            cache: cache,\n            storage: new AsyncStorageWrapper(AsyncStorage)\n          }));\n        case 8:\n          ioniconsFontArray = [Ionicons.font];\n          loadedIoniconsFont = ioniconsFontArray.map(function (ioniconsFont) {\n            return Font.loadAsync(ioniconsFont);\n          });\n          imageArray = [require(\"./assets/instagram_logo_light.png\"), require(\"./assets/instagram_logo_dark.png\"), \"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Instagram_logo.svg/840px-Instagram_logo.svg.png\"];\n          loadedImage = imageArray.map(function (image) {\n            return Asset.loadAsync(image);\n          });\n          Promise.all([loadedIoniconsFont, loadedImage]);\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }, null, null, null, Promise);\n  };\n  var onFinish = function onFinish() {\n    console.log(\"onFinish\");\n    setLoading(false);\n  };\n  var onError = function onError() {\n    console.log(\"onError\");\n  };\n  useEffect(function () {\n    Appearance.addChangeListener(function (_ref) {\n      var colorScheme = _ref.colorScheme;\n      if (colorScheme === \"dark\") {\n        isDarkModeVar(\"dark\");\n      } else {\n        isDarkModeVar(\"light\");\n      }\n    });\n  }, [isDarkMode]);\n  return _jsx(_Fragment, {\n    children: loading === true ? _jsx(AppLoading, {\n      startAsync: startAsync,\n      onFinish: onFinish,\n      onError: onError\n    }) : _jsxs(ApolloProvider, {\n      client: client,\n      children: [_jsx(StatusBar, {\n        barStyle: isDarkMode === \"light\" ? \"dark-content\" : \"light-content\"\n      }), _jsx(ThemeProvider, {\n        theme: isDarkMode === \"light\" ? lightTheme : darkTheme,\n        children: _jsx(NavigationContainer, {\n          children: isLoggedIn === true ? _jsx(LoggedInNavigation, {}) : _jsx(LoggedOutNavigation, {})\n        })\n      })]\n    })\n  });\n};\nexport default App;","map":{"version":3,"names":["Font","AppLoading","Ionicons","LoggedInNavigation","LoggedOutNavigation","AsyncStorage","client","isLoggedInVar","tokenVar","cache","isDarkModeVar","Asset","useEffect","useState","darkTheme","lightTheme","ThemeProvider","NavigationContainer","ApolloProvider","useReactiveVar","Appearance","StatusBar","AsyncStorageWrapper","persistCache","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","_useState","_useState2","_slicedToArray","loading","setLoading","isLoggedIn","isDarkMode","startAsync","colorSchemeName","token","ioniconsFontArray","loadedIoniconsFont","imageArray","loadedImage","_regeneratorRuntime","async","startAsync$","_context","prev","next","getColorScheme","awrap","getItem","sent","storage","font","map","ioniconsFont","loadAsync","require","image","Promise","all","stop","onFinish","console","log","onError","addChangeListener","_ref","colorScheme","children","barStyle","theme"],"sources":["C:/Users/GGPC/Documents/kidsgram-web/App.tsx"],"sourcesContent":["import \"react-native-gesture-handler\";\nimport * as Font from \"expo-font\";\nimport AppLoading from \"expo-app-loading\";\nimport Ionicons from \"@expo/vector-icons/Ionicons\";\nimport LoggedInNavigation from \"./navigators/LoggedInNavigation\";\nimport LoggedOutNavigation from \"./navigators/LoggedOutNavigation\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport client, { isLoggedInVar, tokenVar, cache, isDarkModeVar } from \"./apollo\";\nimport { Asset } from \"expo-asset\";\nimport { useEffect, useState } from \"react\";\nimport { darkTheme, lightTheme } from \"./styles/themes\";\nimport { ThemeProvider } from \"styled-components/native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { ApolloProvider, useReactiveVar } from \"@apollo/client\";\nimport { Appearance, ColorSchemeName, StatusBar } from \"react-native\";\nimport { AsyncStorageWrapper, persistCache } from \"apollo3-cache-persist\";\n\nconst App = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const isLoggedIn: boolean = useReactiveVar(isLoggedInVar);\n  const isDarkMode: \"light\" | \"dark\" = useReactiveVar(isDarkModeVar);\n\n  const startAsync = async (): Promise<void> => {\n    const colorSchemeName: ColorSchemeName = Appearance.getColorScheme();\n    isDarkModeVar(colorSchemeName === \"light\" ? \"light\" : \"dark\");\n\n    const token: string | null = await AsyncStorage.getItem(\"token\");\n    if (token) {\n      isLoggedInVar(true);\n      tokenVar(token);\n    }\n\n    await persistCache({ cache, storage: new AsyncStorageWrapper(AsyncStorage) });\n    const ioniconsFontArray: { [key: string]: any }[] = [Ionicons.font];\n    const loadedIoniconsFont: Promise<void>[] = ioniconsFontArray.map((ioniconsFont: { [key: string]: any }) => Font.loadAsync(ioniconsFont));\n    const imageArray: string[] = [\n      require(\"./assets/instagram_logo_light.png\"),\n      require(\"./assets/instagram_logo_dark.png\"),\n      \"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Instagram_logo.svg/840px-Instagram_logo.svg.png\",\n    ];\n    const loadedImage: Promise<Asset[]>[] = imageArray.map((image: string) => Asset.loadAsync(image));\n    Promise.all([loadedIoniconsFont, loadedImage]); // Promise.all<Promise<void> | Promise<Asset[]>>([...loadedIoniconsFont, ...loadedImage]);\n  };\n\n  const onFinish = (): void => {\n    console.log(\"onFinish\");\n    setLoading(false);\n  };\n\n  const onError = (): void => {\n    console.log(\"onError\");\n  };\n\n  useEffect(() => {\n    Appearance.addChangeListener(({ colorScheme }) => {\n      if (colorScheme === \"dark\") {\n        isDarkModeVar(\"dark\");\n      } else {\n        isDarkModeVar(\"light\");\n      }\n    });\n  }, [isDarkMode]);\n\n  return (\n    <>\n      {loading === true ? (\n        <AppLoading startAsync={startAsync} onFinish={onFinish} onError={onError} />\n      ) : (\n        <ApolloProvider client={client}>\n          <StatusBar barStyle={isDarkMode === \"light\" ? \"dark-content\" : \"light-content\"} />\n          <ThemeProvider theme={isDarkMode === \"light\" ? lightTheme : darkTheme}>\n            <NavigationContainer>{isLoggedIn === true ? <LoggedInNavigation></LoggedInNavigation> : <LoggedOutNavigation></LoggedOutNavigation>}</NavigationContainer>\n          </ThemeProvider>\n        </ApolloProvider>\n      )}\n    </>\n  );\n};\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}