{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13, _templateObject14, _templateObject15, _templateObject16, _templateObject17, _templateObject18, _templateObject19, _templateObject20;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nvar defaultOptions = {};\nexport var CreateAccountDocument = gql(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n    mutation CreateAccount($email: String!, $name: String, $username: String!, $password: String!) {\\n  createAccount(\\n    email: $email\\n    name: $name\\n    username: $username\\n    password: $password\\n  ) {\\n    ok\\n    message\\n  }\\n}\\n    \"])));\nexport function useCreateAccountMutation(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useMutation(CreateAccountDocument, options);\n}\nexport var FollowUserDocument = gql(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n    mutation FollowUser($username: String!) {\\n  followUser(username: $username) {\\n    ok\\n    message\\n    user {\\n      id\\n      name\\n      username\\n    }\\n  }\\n}\\n    \"])));\nexport function useFollowUserMutation(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useMutation(FollowUserDocument, options);\n}\nexport var LoginDocument = gql(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose([\"\\n    mutation Login($username: String!, $password: String!) {\\n  login(username: $username, password: $password) {\\n    ok\\n    message\\n    token\\n  }\\n}\\n    \"])));\nexport function useLoginMutation(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useMutation(LoginDocument, options);\n}\nexport var SendMessageDocument = gql(_templateObject4 || (_templateObject4 = _taggedTemplateLiteralLoose([\"\\n    mutation SendMessage($text: String, $roomId: Int, $userId: Int) {\\n  sendMessage(text: $text, roomId: $roomId, userId: $userId) {\\n    ok\\n    message\\n    room {\\n      id\\n    }\\n    id\\n  }\\n}\\n    \"])));\nexport function useSendMessageMutation(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useMutation(SendMessageDocument, options);\n}\nexport var ToggleLikePhotoDocument = gql(_templateObject5 || (_templateObject5 = _taggedTemplateLiteralLoose([\"\\n    mutation ToggleLikePhoto($photoId: Int!) {\\n  toggleLikePhoto(photoId: $photoId) {\\n    ok\\n    message\\n  }\\n}\\n    \"])));\nexport function useToggleLikePhotoMutation(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useMutation(ToggleLikePhotoDocument, options);\n}\nexport var UnfollowUserDocument = gql(_templateObject6 || (_templateObject6 = _taggedTemplateLiteralLoose([\"\\n    mutation UnfollowUser($username: String!) {\\n  unfollowUser(username: $username) {\\n    ok\\n    message\\n    user {\\n      id\\n      name\\n      username\\n    }\\n  }\\n}\\n    \"])));\nexport function useUnfollowUserMutation(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useMutation(UnfollowUserDocument, options);\n}\nexport var UploadPhotoDocument = gql(_templateObject7 || (_templateObject7 = _taggedTemplateLiteralLoose([\"\\n    mutation UploadPhoto($photo: Upload!, $caption: String) {\\n  uploadPhoto(photo: $photo, caption: $caption) {\\n    ok\\n    message\\n    photo {\\n      id\\n      user {\\n        id\\n        name\\n        username\\n        avatarUrl\\n      }\\n      photoUrl\\n      caption\\n      hashtags {\\n        id\\n        name\\n      }\\n      totalLikes\\n      totalComments\\n      isMe\\n      isLiked\\n      createdAt\\n    }\\n  }\\n}\\n    \"])));\nexport function useUploadPhotoMutation(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useMutation(UploadPhotoDocument, options);\n}\nexport var SearchHashtagsDocument = gql(_templateObject8 || (_templateObject8 = _taggedTemplateLiteralLoose([\"\\n    query SearchHashtags($name: String!) {\\n  searchHashtags(name: $name) {\\n    ok\\n    message\\n    hashtags {\\n      id\\n      name\\n      totalPhotos\\n    }\\n  }\\n}\\n    \"])));\nexport function useSearchHashtagsQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useQuery(SearchHashtagsDocument, options);\n}\nexport function useSearchHashtagsLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useLazyQuery(SearchHashtagsDocument, options);\n}\nexport var SearchPhotosDocument = gql(_templateObject9 || (_templateObject9 = _taggedTemplateLiteralLoose([\"\\n    query SearchPhotos($keyword: String!, $cursor: Int) {\\n  searchPhotos(keyword: $keyword, cursor: $cursor) {\\n    ok\\n    message\\n    photos {\\n      id\\n      photoUrl\\n      user {\\n        id\\n        username\\n      }\\n      totalLikes\\n      totalComments\\n    }\\n  }\\n}\\n    \"])));\nexport function useSearchPhotosQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useQuery(SearchPhotosDocument, options);\n}\nexport function useSearchPhotosLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useLazyQuery(SearchPhotosDocument, options);\n}\nexport var SearchUsersDocument = gql(_templateObject10 || (_templateObject10 = _taggedTemplateLiteralLoose([\"\\n    query SearchUsers($username: String!, $cursor: String) {\\n  searchUsers(username: $username, cursor: $cursor) {\\n    ok\\n    message\\n    users {\\n      id\\n      name\\n      username\\n      avatarUrl\\n    }\\n  }\\n}\\n    \"])));\nexport function useSearchUsersQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useQuery(SearchUsersDocument, options);\n}\nexport function useSearchUsersLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useLazyQuery(SearchUsersDocument, options);\n}\nexport var SeeCommentsDocument = gql(_templateObject11 || (_templateObject11 = _taggedTemplateLiteralLoose([\"\\n    query SeeComments($photoId: Int!, $cursor: Int) {\\n  seeComments(photoId: $photoId, cursor: $cursor) {\\n    ok\\n    message\\n    comments {\\n      id\\n      text\\n      user {\\n        id\\n        username\\n        name\\n        avatarUrl\\n        isMe\\n        isFollowing\\n      }\\n      isMe\\n      createdAt\\n    }\\n  }\\n}\\n    \"])));\nexport function useSeeCommentsQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useQuery(SeeCommentsDocument, options);\n}\nexport function useSeeCommentsLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useLazyQuery(SeeCommentsDocument, options);\n}\nexport var SeeFeedDocument = gql(_templateObject12 || (_templateObject12 = _taggedTemplateLiteralLoose([\"\\n    query SeeFeed($cursor: Int) {\\n  seeFeed(cursor: $cursor) {\\n    ok\\n    message\\n    lastPhotoId\\n    photos {\\n      id\\n      photoUrl\\n      caption\\n      totalLikes\\n      totalComments\\n      isMe\\n      isLiked\\n      createdAt\\n      user {\\n        id\\n        name\\n        username\\n        avatarUrl\\n        isFollowing\\n        isMe\\n      }\\n      hashtags {\\n        id\\n        name\\n      }\\n      comments {\\n        id\\n        text\\n        isMe\\n        createdAt\\n        user {\\n          id\\n          username\\n          avatarUrl\\n        }\\n      }\\n    }\\n  }\\n}\\n    \"])));\nexport function useSeeFeedQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useQuery(SeeFeedDocument, options);\n}\nexport function useSeeFeedLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useLazyQuery(SeeFeedDocument, options);\n}\nexport var SeeMeDocument = gql(_templateObject13 || (_templateObject13 = _taggedTemplateLiteralLoose([\"\\n    query SeeMe {\\n  seeMe {\\n    ok\\n    message\\n    user {\\n      id\\n      name\\n      username\\n      email\\n      avatarUrl\\n      bio\\n      isMe\\n    }\\n  }\\n}\\n    \"])));\nexport function useSeeMeQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useQuery(SeeMeDocument, options);\n}\nexport function useSeeMeLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useLazyQuery(SeeMeDocument, options);\n}\nexport var SeePhotoDocument = gql(_templateObject14 || (_templateObject14 = _taggedTemplateLiteralLoose([\"\\n    query SeePhoto($photoId: Int!) {\\n  seePhoto(photoId: $photoId) {\\n    ok\\n    message\\n    photo {\\n      id\\n      user {\\n        id\\n        name\\n        username\\n        avatarUrl\\n        isFollowing\\n        isMe\\n      }\\n      photoUrl\\n      caption\\n      totalLikes\\n      totalComments\\n      isMe\\n      isLiked\\n      createdAt\\n    }\\n  }\\n}\\n    \"])));\nexport function useSeePhotoQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useQuery(SeePhotoDocument, options);\n}\nexport function useSeePhotoLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useLazyQuery(SeePhotoDocument, options);\n}\nexport var SeePhotoLikesDocument = gql(_templateObject15 || (_templateObject15 = _taggedTemplateLiteralLoose([\"\\n    query SeePhotoLikes($photoId: Int!, $cursor: String) {\\n  seePhotoLikes(photoId: $photoId, cursor: $cursor) {\\n    ok\\n    message\\n    users {\\n      id\\n      name\\n      username\\n      avatarUrl\\n      isFollowing\\n      isMe\\n    }\\n  }\\n}\\n    \"])));\nexport function useSeePhotoLikesQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useQuery(SeePhotoLikesDocument, options);\n}\nexport function useSeePhotoLikesLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useLazyQuery(SeePhotoLikesDocument, options);\n}\nexport var SeeProfileDocument = gql(_templateObject16 || (_templateObject16 = _taggedTemplateLiteralLoose([\"\\n    query SeeProfile($username: String!, $cursor: Int) {\\n  seeProfile(username: $username) {\\n    ok\\n    message\\n    user {\\n      id\\n      name\\n      username\\n      bio\\n      avatarUrl\\n      totalFollowing\\n      totalFollowers\\n      totalPhotos\\n      isFollowing\\n      isMe\\n      photos(cursor: $cursor) {\\n        id\\n        user {\\n          id\\n          name\\n          username\\n          avatarUrl\\n        }\\n        photoUrl\\n        isLiked\\n        totalLikes\\n        totalComments\\n        caption\\n        createdAt\\n      }\\n      following {\\n        id\\n        name\\n        username\\n        avatarUrl\\n        isFollowing\\n      }\\n      followers {\\n        id\\n        name\\n        username\\n        avatarUrl\\n        isFollowing\\n      }\\n    }\\n  }\\n}\\n    \"])));\nexport function useSeeProfileQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useQuery(SeeProfileDocument, options);\n}\nexport function useSeeProfileLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useLazyQuery(SeeProfileDocument, options);\n}\nexport var SeeRecommendPhotosDocument = gql(_templateObject17 || (_templateObject17 = _taggedTemplateLiteralLoose([\"\\n    query SeeRecommendPhotos {\\n  seeRecommendPhotos {\\n    ok\\n    message\\n    photos {\\n      id\\n      photoUrl\\n      caption\\n      totalLikes\\n      totalComments\\n      isMe\\n      isLiked\\n      createdAt\\n      user {\\n        id\\n        name\\n        username\\n        avatarUrl\\n      }\\n      hashtags {\\n        id\\n        name\\n      }\\n      comments {\\n        id\\n        text\\n        isMe\\n        createdAt\\n        user {\\n          id\\n          username\\n          avatarUrl\\n        }\\n      }\\n    }\\n  }\\n}\\n    \"])));\nexport function useSeeRecommendPhotosQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useQuery(SeeRecommendPhotosDocument, options);\n}\nexport function useSeeRecommendPhotosLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useLazyQuery(SeeRecommendPhotosDocument, options);\n}\nexport var SeeRoomDocument = gql(_templateObject18 || (_templateObject18 = _taggedTemplateLiteralLoose([\"\\n    query SeeRoom($roomId: Int!) {\\n  seeRoom(roomId: $roomId) {\\n    ok\\n    message\\n    room {\\n      id\\n      users {\\n        id\\n        name\\n        username\\n        avatarUrl\\n        isFollowing\\n        isMe\\n      }\\n      messages {\\n        id\\n        text\\n        read\\n        createdAt\\n        user {\\n          id\\n          username\\n          avatarUrl\\n          isMe\\n        }\\n      }\\n    }\\n  }\\n}\\n    \"])));\nexport function useSeeRoomQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useQuery(SeeRoomDocument, options);\n}\nexport function useSeeRoomLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useLazyQuery(SeeRoomDocument, options);\n}\nexport var SeeRoomsDocument = gql(_templateObject19 || (_templateObject19 = _taggedTemplateLiteralLoose([\"\\n    query SeeRooms {\\n  seeRooms {\\n    ok\\n    message\\n    rooms {\\n      id\\n      users {\\n        id\\n        name\\n        username\\n        avatarUrl\\n        isFollowing\\n        isMe\\n      }\\n      messages {\\n        id\\n        text\\n        createdAt\\n      }\\n      totalUnreadMessages\\n      latestMessage {\\n        id\\n        text\\n        createdAt\\n      }\\n      createdAt\\n      updatedAt\\n    }\\n  }\\n}\\n    \"])));\nexport function useSeeRoomsQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useQuery(SeeRoomsDocument, options);\n}\nexport function useSeeRoomsLazyQuery(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useLazyQuery(SeeRoomsDocument, options);\n}\nexport var MessageUpdatesDocument = gql(_templateObject20 || (_templateObject20 = _taggedTemplateLiteralLoose([\"\\n    subscription MessageUpdates($roomId: Int!) {\\n  messageUpdates(roomId: $roomId) {\\n    id\\n    text\\n    read\\n    user {\\n      id\\n      username\\n      avatarUrl\\n    }\\n    createdAt\\n  }\\n}\\n    \"])));\nexport function useMessageUpdatesSubscription(baseOptions) {\n  var options = _objectSpread(_objectSpread({}, defaultOptions), baseOptions);\n  return Apollo.useSubscription(MessageUpdatesDocument, options);\n}","map":{"version":3,"names":["gql","Apollo","defaultOptions","CreateAccountDocument","_templateObject","_taggedTemplateLiteralLoose","useCreateAccountMutation","baseOptions","options","_objectSpread","useMutation","FollowUserDocument","_templateObject2","useFollowUserMutation","LoginDocument","_templateObject3","useLoginMutation","SendMessageDocument","_templateObject4","useSendMessageMutation","ToggleLikePhotoDocument","_templateObject5","useToggleLikePhotoMutation","UnfollowUserDocument","_templateObject6","useUnfollowUserMutation","UploadPhotoDocument","_templateObject7","useUploadPhotoMutation","SearchHashtagsDocument","_templateObject8","useSearchHashtagsQuery","useQuery","useSearchHashtagsLazyQuery","useLazyQuery","SearchPhotosDocument","_templateObject9","useSearchPhotosQuery","useSearchPhotosLazyQuery","SearchUsersDocument","_templateObject10","useSearchUsersQuery","useSearchUsersLazyQuery","SeeCommentsDocument","_templateObject11","useSeeCommentsQuery","useSeeCommentsLazyQuery","SeeFeedDocument","_templateObject12","useSeeFeedQuery","useSeeFeedLazyQuery","SeeMeDocument","_templateObject13","useSeeMeQuery","useSeeMeLazyQuery","SeePhotoDocument","_templateObject14","useSeePhotoQuery","useSeePhotoLazyQuery","SeePhotoLikesDocument","_templateObject15","useSeePhotoLikesQuery","useSeePhotoLikesLazyQuery","SeeProfileDocument","_templateObject16","useSeeProfileQuery","useSeeProfileLazyQuery","SeeRecommendPhotosDocument","_templateObject17","useSeeRecommendPhotosQuery","useSeeRecommendPhotosLazyQuery","SeeRoomDocument","_templateObject18","useSeeRoomQuery","useSeeRoomLazyQuery","SeeRoomsDocument","_templateObject19","useSeeRoomsQuery","useSeeRoomsLazyQuery","MessageUpdatesDocument","_templateObject20","useMessageUpdatesSubscription","useSubscription"],"sources":["C:/Users/GGPC/Documents/kidsgram-web/generated/graphql.ts"],"sourcesContent":["import { gql } from '@apollo/client';\r\nimport * as Apollo from '@apollo/client';\r\nexport type Maybe<T> = T | null;\r\nexport type InputMaybe<T> = Maybe<T>;\r\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\r\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\r\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\r\nconst defaultOptions = {} as const;\r\n/** All built-in and custom scalars, mapped to their actual values */\r\nexport type Scalars = {\r\n  ID: string;\r\n  String: string;\r\n  Boolean: boolean;\r\n  Int: number;\r\n  Float: number;\r\n  Upload: any;\r\n};\r\n\r\nexport type Comment = {\r\n  __typename?: 'Comment';\r\n  createdAt: Scalars['String'];\r\n  id: Scalars['Int'];\r\n  isMe: Scalars['Boolean'];\r\n  photo: Photo;\r\n  text: Scalars['String'];\r\n  updatedAt: Scalars['String'];\r\n  user: User;\r\n};\r\n\r\nexport type CommonResult = {\r\n  __typename?: 'CommonResult';\r\n  id?: Maybe<Scalars['Int']>;\r\n  message: Scalars['String'];\r\n  ok: Scalars['Boolean'];\r\n};\r\n\r\nexport type FollowUserResult = {\r\n  __typename?: 'FollowUserResult';\r\n  message: Scalars['String'];\r\n  ok: Scalars['Boolean'];\r\n  user?: Maybe<User>;\r\n};\r\n\r\nexport type Hashtag = {\r\n  __typename?: 'Hashtag';\r\n  createdAt: Scalars['String'];\r\n  id: Scalars['Int'];\r\n  name: Scalars['String'];\r\n  photos?: Maybe<Array<Maybe<Photo>>>;\r\n  totalPhotos?: Maybe<Scalars['Int']>;\r\n  updatedAt: Scalars['String'];\r\n};\r\n\r\n\r\nexport type HashtagPhotosArgs = {\r\n  cursor?: InputMaybe<Scalars['Int']>;\r\n};\r\n\r\nexport type Like = {\r\n  __typename?: 'Like';\r\n  createdAt: Scalars['String'];\r\n  id: Scalars['Int'];\r\n  photo: Photo;\r\n  updatedAt: Scalars['String'];\r\n  user: User;\r\n};\r\n\r\nexport type LoginResult = {\r\n  __typename?: 'LoginResult';\r\n  message: Scalars['String'];\r\n  ok: Scalars['Boolean'];\r\n  token?: Maybe<Scalars['String']>;\r\n};\r\n\r\nexport type Message = {\r\n  __typename?: 'Message';\r\n  createdAt: Scalars['String'];\r\n  id: Scalars['Int'];\r\n  read: Scalars['Boolean'];\r\n  room: Room;\r\n  text: Scalars['String'];\r\n  updatedAt: Scalars['String'];\r\n  user: User;\r\n};\r\n\r\nexport type Mutation = {\r\n  __typename?: 'Mutation';\r\n  createAccount: CommonResult;\r\n  createComment: CommonResult;\r\n  deleteAccount: CommonResult;\r\n  deleteComment: CommonResult;\r\n  deleteMessage: CommonResult;\r\n  deletePhoto: CommonResult;\r\n  editComment: CommonResult;\r\n  editPhoto: CommonResult;\r\n  editProfile: CommonResult;\r\n  followUser: FollowUserResult;\r\n  login: LoginResult;\r\n  readMessage: CommonResult;\r\n  sendMessage: SendMessageResult;\r\n  toggleLikePhoto: CommonResult;\r\n  unfollowUser: UnfollowUserResult;\r\n  uploadPhoto: UploadPhotoResult;\r\n};\r\n\r\n\r\nexport type MutationCreateAccountArgs = {\r\n  email: Scalars['String'];\r\n  name?: InputMaybe<Scalars['String']>;\r\n  password: Scalars['String'];\r\n  username: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationCreateCommentArgs = {\r\n  photoId: Scalars['Int'];\r\n  text: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationDeleteAccountArgs = {\r\n  userId: Scalars['Int'];\r\n};\r\n\r\n\r\nexport type MutationDeleteCommentArgs = {\r\n  commentId: Scalars['Int'];\r\n};\r\n\r\n\r\nexport type MutationDeleteMessageArgs = {\r\n  messageId: Scalars['Int'];\r\n};\r\n\r\n\r\nexport type MutationDeletePhotoArgs = {\r\n  photoId: Scalars['Int'];\r\n};\r\n\r\n\r\nexport type MutationEditCommentArgs = {\r\n  commentId: Scalars['Int'];\r\n  text: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationEditPhotoArgs = {\r\n  caption: Scalars['String'];\r\n  photoId: Scalars['Int'];\r\n};\r\n\r\n\r\nexport type MutationEditProfileArgs = {\r\n  avatar?: InputMaybe<Scalars['Upload']>;\r\n  bio?: InputMaybe<Scalars['String']>;\r\n  email?: InputMaybe<Scalars['String']>;\r\n  name?: InputMaybe<Scalars['String']>;\r\n  password?: InputMaybe<Scalars['String']>;\r\n  username?: InputMaybe<Scalars['String']>;\r\n};\r\n\r\n\r\nexport type MutationFollowUserArgs = {\r\n  username: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationLoginArgs = {\r\n  password: Scalars['String'];\r\n  username: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationReadMessageArgs = {\r\n  messageId: Scalars['Int'];\r\n};\r\n\r\n\r\nexport type MutationSendMessageArgs = {\r\n  roomId?: InputMaybe<Scalars['Int']>;\r\n  text?: InputMaybe<Scalars['String']>;\r\n  userId?: InputMaybe<Scalars['Int']>;\r\n};\r\n\r\n\r\nexport type MutationToggleLikePhotoArgs = {\r\n  photoId: Scalars['Int'];\r\n};\r\n\r\n\r\nexport type MutationUnfollowUserArgs = {\r\n  username: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationUploadPhotoArgs = {\r\n  caption?: InputMaybe<Scalars['String']>;\r\n  photo: Scalars['Upload'];\r\n};\r\n\r\nexport type Photo = {\r\n  __typename?: 'Photo';\r\n  caption?: Maybe<Scalars['String']>;\r\n  comments?: Maybe<Array<Maybe<Comment>>>;\r\n  createdAt: Scalars['String'];\r\n  hashtags?: Maybe<Array<Maybe<Hashtag>>>;\r\n  id: Scalars['Int'];\r\n  isLiked: Scalars['Boolean'];\r\n  isMe: Scalars['Boolean'];\r\n  photoUrl: Scalars['String'];\r\n  totalComments: Scalars['Int'];\r\n  totalLikes: Scalars['Int'];\r\n  updatedAt: Scalars['String'];\r\n  user: User;\r\n};\r\n\r\nexport type Query = {\r\n  __typename?: 'Query';\r\n  searchHashtags: SearchHashtagsResult;\r\n  searchPhotos: SearchPhotosResult;\r\n  searchUsers: SearchUsersResult;\r\n  seeComments: SeeCommentsResult;\r\n  seeFeed: SeeFeedResult;\r\n  seeFollowers: SeeFollowersResult;\r\n  seeFollowing: SeeFollowingResult;\r\n  seeHashtag: SeeHashtagResult;\r\n  seeMe: SeeMeResult;\r\n  seePhoto: SeePhotoResult;\r\n  seePhotoLikes: SeePhotoLikesResult;\r\n  seeProfile: SeeProfileResult;\r\n  seeRecommendPhotos: SeeRecommendPhotosResult;\r\n  seeRecommendUsers: SeeRecommendUsersResult;\r\n  seeRoom: SeeRoomResult;\r\n  seeRooms: SeeRoomsResult;\r\n  seeUsers: SeeUsersResult;\r\n};\r\n\r\n\r\nexport type QuerySearchHashtagsArgs = {\r\n  name: Scalars['String'];\r\n};\r\n\r\n\r\nexport type QuerySearchPhotosArgs = {\r\n  cursor?: InputMaybe<Scalars['Int']>;\r\n  keyword: Scalars['String'];\r\n};\r\n\r\n\r\nexport type QuerySearchUsersArgs = {\r\n  cursor?: InputMaybe<Scalars['String']>;\r\n  username: Scalars['String'];\r\n};\r\n\r\n\r\nexport type QuerySeeCommentsArgs = {\r\n  cursor?: InputMaybe<Scalars['Int']>;\r\n  photoId: Scalars['Int'];\r\n};\r\n\r\n\r\nexport type QuerySeeFeedArgs = {\r\n  cursor?: InputMaybe<Scalars['Int']>;\r\n};\r\n\r\n\r\nexport type QuerySeeFollowersArgs = {\r\n  cursor?: InputMaybe<Scalars['String']>;\r\n  username: Scalars['String'];\r\n};\r\n\r\n\r\nexport type QuerySeeFollowingArgs = {\r\n  cursor?: InputMaybe<Scalars['String']>;\r\n  username: Scalars['String'];\r\n};\r\n\r\n\r\nexport type QuerySeeHashtagArgs = {\r\n  name: Scalars['String'];\r\n};\r\n\r\n\r\nexport type QuerySeePhotoArgs = {\r\n  photoId: Scalars['Int'];\r\n};\r\n\r\n\r\nexport type QuerySeePhotoLikesArgs = {\r\n  cursor?: InputMaybe<Scalars['String']>;\r\n  photoId: Scalars['Int'];\r\n};\r\n\r\n\r\nexport type QuerySeeProfileArgs = {\r\n  username: Scalars['String'];\r\n};\r\n\r\n\r\nexport type QuerySeeRoomArgs = {\r\n  roomId: Scalars['Int'];\r\n};\r\n\r\nexport type Room = {\r\n  __typename?: 'Room';\r\n  createdAt: Scalars['String'];\r\n  id: Scalars['Int'];\r\n  latestMessage?: Maybe<Message>;\r\n  messages?: Maybe<Array<Maybe<Message>>>;\r\n  totalUnreadMessages: Scalars['Int'];\r\n  updatedAt: Scalars['String'];\r\n  users?: Maybe<Array<Maybe<User>>>;\r\n};\r\n\r\nexport type SearchHashtagsResult = {\r\n  __typename?: 'SearchHashtagsResult';\r\n  hashtags?: Maybe<Array<Maybe<Hashtag>>>;\r\n  message: Scalars['String'];\r\n  ok: Scalars['Boolean'];\r\n};\r\n\r\nexport type SearchPhotosResult = {\r\n  __typename?: 'SearchPhotosResult';\r\n  message: Scalars['String'];\r\n  ok: Scalars['Boolean'];\r\n  photos?: Maybe<Array<Maybe<Photo>>>;\r\n};\r\n\r\nexport type SearchUsersResult = {\r\n  __typename?: 'SearchUsersResult';\r\n  message: Scalars['String'];\r\n  ok: Scalars['Boolean'];\r\n  users?: Maybe<Array<Maybe<User>>>;\r\n};\r\n\r\nexport type SeeCommentsResult = {\r\n  __typename?: 'SeeCommentsResult';\r\n  comments?: Maybe<Array<Maybe<Comment>>>;\r\n  message: Scalars['String'];\r\n  ok: Scalars['Boolean'];\r\n};\r\n\r\nexport type SeeFeedResult = {\r\n  __typename?: 'SeeFeedResult';\r\n  lastPhotoId?: Maybe<Scalars['Int']>;\r\n  message: Scalars['String'];\r\n  ok: Scalars['Boolean'];\r\n  photos?: Maybe<Array<Maybe<Photo>>>;\r\n};\r\n\r\nexport type SeeFollowersResult = {\r\n  __typename?: 'SeeFollowersResult';\r\n  followers?: Maybe<Array<Maybe<User>>>;\r\n  message: Scalars['String'];\r\n  ok: Scalars['Boolean'];\r\n};\r\n\r\nexport type SeeFollowingResult = {\r\n  __typename?: 'SeeFollowingResult';\r\n  following?: Maybe<Array<Maybe<User>>>;\r\n  message: Scalars['String'];\r\n  ok: Scalars['Boolean'];\r\n};\r\n\r\nexport type SeeHashtagResult = {\r\n  __typename?: 'SeeHashtagResult';\r\n  hashtag?: Maybe<Hashtag>;\r\n  message: Scalars['String'];\r\n  ok: Scalars['Boolean'];\r\n};\r\n\r\nexport type SeeMeResult = {\r\n  __typename?: 'SeeMeResult';\r\n  message: Scalars['String'];\r\n  ok: Scalars['Boolean'];\r\n  user?: Maybe<User>;\r\n};\r\n\r\nexport type SeePhotoLikesResult = {\r\n  __typename?: 'SeePhotoLikesResult';\r\n  message: Scalars['String'];\r\n  ok: Scalars['Boolean'];\r\n  users?: Maybe<Array<Maybe<User>>>;\r\n};\r\n\r\nexport type SeePhotoResult = {\r\n  __typename?: 'SeePhotoResult';\r\n  message: Scalars['String'];\r\n  ok: Scalars['Boolean'];\r\n  photo?: Maybe<Photo>;\r\n};\r\n\r\nexport type SeeProfileResult = {\r\n  __typename?: 'SeeProfileResult';\r\n  message: Scalars['String'];\r\n  ok: Scalars['Boolean'];\r\n  user?: Maybe<User>;\r\n};\r\n\r\nexport type SeeRecommendPhotosResult = {\r\n  __typename?: 'SeeRecommendPhotosResult';\r\n  message: Scalars['String'];\r\n  ok: Scalars['Boolean'];\r\n  photos?: Maybe<Array<Maybe<Photo>>>;\r\n};\r\n\r\nexport type SeeRecommendUsersResult = {\r\n  __typename?: 'SeeRecommendUsersResult';\r\n  message: Scalars['String'];\r\n  ok: Scalars['Boolean'];\r\n  users?: Maybe<Array<Maybe<User>>>;\r\n};\r\n\r\nexport type SeeRoomResult = {\r\n  __typename?: 'SeeRoomResult';\r\n  message: Scalars['String'];\r\n  ok: Scalars['Boolean'];\r\n  room?: Maybe<Room>;\r\n};\r\n\r\nexport type SeeRoomsResult = {\r\n  __typename?: 'SeeRoomsResult';\r\n  message: Scalars['String'];\r\n  ok: Scalars['Boolean'];\r\n  rooms?: Maybe<Array<Maybe<Room>>>;\r\n};\r\n\r\nexport type SeeUsersResult = {\r\n  __typename?: 'SeeUsersResult';\r\n  message: Scalars['String'];\r\n  ok: Scalars['Boolean'];\r\n  users?: Maybe<Array<Maybe<User>>>;\r\n};\r\n\r\nexport type SendMessageResult = {\r\n  __typename?: 'SendMessageResult';\r\n  id?: Maybe<Scalars['Int']>;\r\n  message: Scalars['String'];\r\n  ok: Scalars['Boolean'];\r\n  room?: Maybe<Room>;\r\n};\r\n\r\nexport type Subscription = {\r\n  __typename?: 'Subscription';\r\n  commentUpdates?: Maybe<Comment>;\r\n  followUpdates?: Maybe<User>;\r\n  likeUpdates?: Maybe<Like>;\r\n  messageUpdates?: Maybe<Message>;\r\n};\r\n\r\n\r\nexport type SubscriptionCommentUpdatesArgs = {\r\n  photoId: Scalars['Int'];\r\n};\r\n\r\n\r\nexport type SubscriptionFollowUpdatesArgs = {\r\n  userId: Scalars['Int'];\r\n};\r\n\r\n\r\nexport type SubscriptionLikeUpdatesArgs = {\r\n  photoId: Scalars['Int'];\r\n};\r\n\r\n\r\nexport type SubscriptionMessageUpdatesArgs = {\r\n  roomId: Scalars['Int'];\r\n};\r\n\r\nexport type UnfollowUserResult = {\r\n  __typename?: 'UnfollowUserResult';\r\n  message: Scalars['String'];\r\n  ok: Scalars['Boolean'];\r\n  user?: Maybe<User>;\r\n};\r\n\r\nexport type UploadPhotoResult = {\r\n  __typename?: 'UploadPhotoResult';\r\n  message: Scalars['String'];\r\n  ok: Scalars['Boolean'];\r\n  photo?: Maybe<Photo>;\r\n};\r\n\r\nexport type User = {\r\n  __typename?: 'User';\r\n  avatarUrl?: Maybe<Scalars['String']>;\r\n  bio?: Maybe<Scalars['String']>;\r\n  createdAt: Scalars['String'];\r\n  email: Scalars['String'];\r\n  followers?: Maybe<Array<Maybe<User>>>;\r\n  following?: Maybe<Array<Maybe<User>>>;\r\n  id: Scalars['Int'];\r\n  isFollowing: Scalars['Boolean'];\r\n  isMe: Scalars['Boolean'];\r\n  name?: Maybe<Scalars['String']>;\r\n  photos?: Maybe<Array<Maybe<Photo>>>;\r\n  totalFollowers: Scalars['Int'];\r\n  totalFollowing: Scalars['Int'];\r\n  totalPhotos: Scalars['Int'];\r\n  updatedAt: Scalars['String'];\r\n  username: Scalars['String'];\r\n};\r\n\r\n\r\nexport type UserPhotosArgs = {\r\n  cursor?: InputMaybe<Scalars['Int']>;\r\n};\r\n\r\nexport type CreateAccountMutationVariables = Exact<{\r\n  email: Scalars['String'];\r\n  name?: InputMaybe<Scalars['String']>;\r\n  username: Scalars['String'];\r\n  password: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type CreateAccountMutation = { __typename?: 'Mutation', createAccount: { __typename?: 'CommonResult', ok: boolean, message: string } };\r\n\r\nexport type FollowUserMutationVariables = Exact<{\r\n  username: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type FollowUserMutation = { __typename?: 'Mutation', followUser: { __typename?: 'FollowUserResult', ok: boolean, message: string, user?: { __typename?: 'User', id: number, name?: string | null, username: string } | null } };\r\n\r\nexport type LoginMutationVariables = Exact<{\r\n  username: Scalars['String'];\r\n  password: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type LoginMutation = { __typename?: 'Mutation', login: { __typename?: 'LoginResult', ok: boolean, message: string, token?: string | null } };\r\n\r\nexport type SendMessageMutationVariables = Exact<{\r\n  text?: InputMaybe<Scalars['String']>;\r\n  roomId?: InputMaybe<Scalars['Int']>;\r\n  userId?: InputMaybe<Scalars['Int']>;\r\n}>;\r\n\r\n\r\nexport type SendMessageMutation = { __typename?: 'Mutation', sendMessage: { __typename?: 'SendMessageResult', ok: boolean, message: string, id?: number | null, room?: { __typename?: 'Room', id: number } | null } };\r\n\r\nexport type ToggleLikePhotoMutationVariables = Exact<{\r\n  photoId: Scalars['Int'];\r\n}>;\r\n\r\n\r\nexport type ToggleLikePhotoMutation = { __typename?: 'Mutation', toggleLikePhoto: { __typename?: 'CommonResult', ok: boolean, message: string } };\r\n\r\nexport type UnfollowUserMutationVariables = Exact<{\r\n  username: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type UnfollowUserMutation = { __typename?: 'Mutation', unfollowUser: { __typename?: 'UnfollowUserResult', ok: boolean, message: string, user?: { __typename?: 'User', id: number, name?: string | null, username: string } | null } };\r\n\r\nexport type UploadPhotoMutationVariables = Exact<{\r\n  photo: Scalars['Upload'];\r\n  caption?: InputMaybe<Scalars['String']>;\r\n}>;\r\n\r\n\r\nexport type UploadPhotoMutation = { __typename?: 'Mutation', uploadPhoto: { __typename?: 'UploadPhotoResult', ok: boolean, message: string, photo?: { __typename?: 'Photo', id: number, photoUrl: string, caption?: string | null, totalLikes: number, totalComments: number, isMe: boolean, isLiked: boolean, createdAt: string, user: { __typename?: 'User', id: number, name?: string | null, username: string, avatarUrl?: string | null }, hashtags?: Array<{ __typename?: 'Hashtag', id: number, name: string } | null> | null } | null } };\r\n\r\nexport type SearchHashtagsQueryVariables = Exact<{\r\n  name: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type SearchHashtagsQuery = { __typename?: 'Query', searchHashtags: { __typename?: 'SearchHashtagsResult', ok: boolean, message: string, hashtags?: Array<{ __typename?: 'Hashtag', id: number, name: string, totalPhotos?: number | null } | null> | null } };\r\n\r\nexport type SearchPhotosQueryVariables = Exact<{\r\n  keyword: Scalars['String'];\r\n  cursor?: InputMaybe<Scalars['Int']>;\r\n}>;\r\n\r\n\r\nexport type SearchPhotosQuery = { __typename?: 'Query', searchPhotos: { __typename?: 'SearchPhotosResult', ok: boolean, message: string, photos?: Array<{ __typename?: 'Photo', id: number, photoUrl: string, totalLikes: number, totalComments: number, user: { __typename?: 'User', id: number, username: string } } | null> | null } };\r\n\r\nexport type SearchUsersQueryVariables = Exact<{\r\n  username: Scalars['String'];\r\n  cursor?: InputMaybe<Scalars['String']>;\r\n}>;\r\n\r\n\r\nexport type SearchUsersQuery = { __typename?: 'Query', searchUsers: { __typename?: 'SearchUsersResult', ok: boolean, message: string, users?: Array<{ __typename?: 'User', id: number, name?: string | null, username: string, avatarUrl?: string | null } | null> | null } };\r\n\r\nexport type SeeCommentsQueryVariables = Exact<{\r\n  photoId: Scalars['Int'];\r\n  cursor?: InputMaybe<Scalars['Int']>;\r\n}>;\r\n\r\n\r\nexport type SeeCommentsQuery = { __typename?: 'Query', seeComments: { __typename?: 'SeeCommentsResult', ok: boolean, message: string, comments?: Array<{ __typename?: 'Comment', id: number, text: string, isMe: boolean, createdAt: string, user: { __typename?: 'User', id: number, username: string, name?: string | null, avatarUrl?: string | null, isMe: boolean, isFollowing: boolean } } | null> | null } };\r\n\r\nexport type SeeFeedQueryVariables = Exact<{\r\n  cursor?: InputMaybe<Scalars['Int']>;\r\n}>;\r\n\r\n\r\nexport type SeeFeedQuery = { __typename?: 'Query', seeFeed: { __typename?: 'SeeFeedResult', ok: boolean, message: string, lastPhotoId?: number | null, photos?: Array<{ __typename?: 'Photo', id: number, photoUrl: string, caption?: string | null, totalLikes: number, totalComments: number, isMe: boolean, isLiked: boolean, createdAt: string, user: { __typename?: 'User', id: number, name?: string | null, username: string, avatarUrl?: string | null, isFollowing: boolean, isMe: boolean }, hashtags?: Array<{ __typename?: 'Hashtag', id: number, name: string } | null> | null, comments?: Array<{ __typename?: 'Comment', id: number, text: string, isMe: boolean, createdAt: string, user: { __typename?: 'User', id: number, username: string, avatarUrl?: string | null } } | null> | null } | null> | null } };\r\n\r\nexport type SeeMeQueryVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type SeeMeQuery = { __typename?: 'Query', seeMe: { __typename?: 'SeeMeResult', ok: boolean, message: string, user?: { __typename?: 'User', id: number, name?: string | null, username: string, email: string, avatarUrl?: string | null, bio?: string | null, isMe: boolean } | null } };\r\n\r\nexport type SeePhotoQueryVariables = Exact<{\r\n  photoId: Scalars['Int'];\r\n}>;\r\n\r\n\r\nexport type SeePhotoQuery = { __typename?: 'Query', seePhoto: { __typename?: 'SeePhotoResult', ok: boolean, message: string, photo?: { __typename?: 'Photo', id: number, photoUrl: string, caption?: string | null, totalLikes: number, totalComments: number, isMe: boolean, isLiked: boolean, createdAt: string, user: { __typename?: 'User', id: number, name?: string | null, username: string, avatarUrl?: string | null, isFollowing: boolean, isMe: boolean } } | null } };\r\n\r\nexport type SeePhotoLikesQueryVariables = Exact<{\r\n  photoId: Scalars['Int'];\r\n  cursor?: InputMaybe<Scalars['String']>;\r\n}>;\r\n\r\n\r\nexport type SeePhotoLikesQuery = { __typename?: 'Query', seePhotoLikes: { __typename?: 'SeePhotoLikesResult', ok: boolean, message: string, users?: Array<{ __typename?: 'User', id: number, name?: string | null, username: string, avatarUrl?: string | null, isFollowing: boolean, isMe: boolean } | null> | null } };\r\n\r\nexport type SeeProfileQueryVariables = Exact<{\r\n  username: Scalars['String'];\r\n  cursor?: InputMaybe<Scalars['Int']>;\r\n}>;\r\n\r\n\r\nexport type SeeProfileQuery = { __typename?: 'Query', seeProfile: { __typename?: 'SeeProfileResult', ok: boolean, message: string, user?: { __typename?: 'User', id: number, name?: string | null, username: string, bio?: string | null, avatarUrl?: string | null, totalFollowing: number, totalFollowers: number, totalPhotos: number, isFollowing: boolean, isMe: boolean, photos?: Array<{ __typename?: 'Photo', id: number, photoUrl: string, isLiked: boolean, totalLikes: number, totalComments: number, caption?: string | null, createdAt: string, user: { __typename?: 'User', id: number, name?: string | null, username: string, avatarUrl?: string | null } } | null> | null, following?: Array<{ __typename?: 'User', id: number, name?: string | null, username: string, avatarUrl?: string | null, isFollowing: boolean } | null> | null, followers?: Array<{ __typename?: 'User', id: number, name?: string | null, username: string, avatarUrl?: string | null, isFollowing: boolean } | null> | null } | null } };\r\n\r\nexport type SeeRecommendPhotosQueryVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type SeeRecommendPhotosQuery = { __typename?: 'Query', seeRecommendPhotos: { __typename?: 'SeeRecommendPhotosResult', ok: boolean, message: string, photos?: Array<{ __typename?: 'Photo', id: number, photoUrl: string, caption?: string | null, totalLikes: number, totalComments: number, isMe: boolean, isLiked: boolean, createdAt: string, user: { __typename?: 'User', id: number, name?: string | null, username: string, avatarUrl?: string | null }, hashtags?: Array<{ __typename?: 'Hashtag', id: number, name: string } | null> | null, comments?: Array<{ __typename?: 'Comment', id: number, text: string, isMe: boolean, createdAt: string, user: { __typename?: 'User', id: number, username: string, avatarUrl?: string | null } } | null> | null } | null> | null } };\r\n\r\nexport type SeeRoomQueryVariables = Exact<{\r\n  roomId: Scalars['Int'];\r\n}>;\r\n\r\n\r\nexport type SeeRoomQuery = { __typename?: 'Query', seeRoom: { __typename?: 'SeeRoomResult', ok: boolean, message: string, room?: { __typename?: 'Room', id: number, users?: Array<{ __typename?: 'User', id: number, name?: string | null, username: string, avatarUrl?: string | null, isFollowing: boolean, isMe: boolean } | null> | null, messages?: Array<{ __typename?: 'Message', id: number, text: string, read: boolean, createdAt: string, user: { __typename?: 'User', id: number, username: string, avatarUrl?: string | null, isMe: boolean } } | null> | null } | null } };\r\n\r\nexport type SeeRoomsQueryVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type SeeRoomsQuery = { __typename?: 'Query', seeRooms: { __typename?: 'SeeRoomsResult', ok: boolean, message: string, rooms?: Array<{ __typename?: 'Room', id: number, totalUnreadMessages: number, createdAt: string, updatedAt: string, users?: Array<{ __typename?: 'User', id: number, name?: string | null, username: string, avatarUrl?: string | null, isFollowing: boolean, isMe: boolean } | null> | null, messages?: Array<{ __typename?: 'Message', id: number, text: string, createdAt: string } | null> | null, latestMessage?: { __typename?: 'Message', id: number, text: string, createdAt: string } | null } | null> | null } };\r\n\r\nexport type MessageUpdatesSubscriptionVariables = Exact<{\r\n  roomId: Scalars['Int'];\r\n}>;\r\n\r\n\r\nexport type MessageUpdatesSubscription = { __typename?: 'Subscription', messageUpdates?: { __typename?: 'Message', id: number, text: string, read: boolean, createdAt: string, user: { __typename?: 'User', id: number, username: string, avatarUrl?: string | null } } | null };\r\n\r\n\r\nexport const CreateAccountDocument = gql`\r\n    mutation CreateAccount($email: String!, $name: String, $username: String!, $password: String!) {\r\n  createAccount(\r\n    email: $email\r\n    name: $name\r\n    username: $username\r\n    password: $password\r\n  ) {\r\n    ok\r\n    message\r\n  }\r\n}\r\n    `;\r\nexport type CreateAccountMutationFn = Apollo.MutationFunction<CreateAccountMutation, CreateAccountMutationVariables>;\r\n\r\n/**\r\n * __useCreateAccountMutation__\r\n *\r\n * To run a mutation, you first call `useCreateAccountMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useCreateAccountMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [createAccountMutation, { data, loading, error }] = useCreateAccountMutation({\r\n *   variables: {\r\n *      email: // value for 'email'\r\n *      name: // value for 'name'\r\n *      username: // value for 'username'\r\n *      password: // value for 'password'\r\n *   },\r\n * });\r\n */\r\nexport function useCreateAccountMutation(baseOptions?: Apollo.MutationHookOptions<CreateAccountMutation, CreateAccountMutationVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useMutation<CreateAccountMutation, CreateAccountMutationVariables>(CreateAccountDocument, options);\r\n      }\r\nexport type CreateAccountMutationHookResult = ReturnType<typeof useCreateAccountMutation>;\r\nexport type CreateAccountMutationResult = Apollo.MutationResult<CreateAccountMutation>;\r\nexport type CreateAccountMutationOptions = Apollo.BaseMutationOptions<CreateAccountMutation, CreateAccountMutationVariables>;\r\nexport const FollowUserDocument = gql`\r\n    mutation FollowUser($username: String!) {\r\n  followUser(username: $username) {\r\n    ok\r\n    message\r\n    user {\r\n      id\r\n      name\r\n      username\r\n    }\r\n  }\r\n}\r\n    `;\r\nexport type FollowUserMutationFn = Apollo.MutationFunction<FollowUserMutation, FollowUserMutationVariables>;\r\n\r\n/**\r\n * __useFollowUserMutation__\r\n *\r\n * To run a mutation, you first call `useFollowUserMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useFollowUserMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [followUserMutation, { data, loading, error }] = useFollowUserMutation({\r\n *   variables: {\r\n *      username: // value for 'username'\r\n *   },\r\n * });\r\n */\r\nexport function useFollowUserMutation(baseOptions?: Apollo.MutationHookOptions<FollowUserMutation, FollowUserMutationVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useMutation<FollowUserMutation, FollowUserMutationVariables>(FollowUserDocument, options);\r\n      }\r\nexport type FollowUserMutationHookResult = ReturnType<typeof useFollowUserMutation>;\r\nexport type FollowUserMutationResult = Apollo.MutationResult<FollowUserMutation>;\r\nexport type FollowUserMutationOptions = Apollo.BaseMutationOptions<FollowUserMutation, FollowUserMutationVariables>;\r\nexport const LoginDocument = gql`\r\n    mutation Login($username: String!, $password: String!) {\r\n  login(username: $username, password: $password) {\r\n    ok\r\n    message\r\n    token\r\n  }\r\n}\r\n    `;\r\nexport type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;\r\n\r\n/**\r\n * __useLoginMutation__\r\n *\r\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useLoginMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\r\n *   variables: {\r\n *      username: // value for 'username'\r\n *      password: // value for 'password'\r\n *   },\r\n * });\r\n */\r\nexport function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, options);\r\n      }\r\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\r\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\r\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;\r\nexport const SendMessageDocument = gql`\r\n    mutation SendMessage($text: String, $roomId: Int, $userId: Int) {\r\n  sendMessage(text: $text, roomId: $roomId, userId: $userId) {\r\n    ok\r\n    message\r\n    room {\r\n      id\r\n    }\r\n    id\r\n  }\r\n}\r\n    `;\r\nexport type SendMessageMutationFn = Apollo.MutationFunction<SendMessageMutation, SendMessageMutationVariables>;\r\n\r\n/**\r\n * __useSendMessageMutation__\r\n *\r\n * To run a mutation, you first call `useSendMessageMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useSendMessageMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [sendMessageMutation, { data, loading, error }] = useSendMessageMutation({\r\n *   variables: {\r\n *      text: // value for 'text'\r\n *      roomId: // value for 'roomId'\r\n *      userId: // value for 'userId'\r\n *   },\r\n * });\r\n */\r\nexport function useSendMessageMutation(baseOptions?: Apollo.MutationHookOptions<SendMessageMutation, SendMessageMutationVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useMutation<SendMessageMutation, SendMessageMutationVariables>(SendMessageDocument, options);\r\n      }\r\nexport type SendMessageMutationHookResult = ReturnType<typeof useSendMessageMutation>;\r\nexport type SendMessageMutationResult = Apollo.MutationResult<SendMessageMutation>;\r\nexport type SendMessageMutationOptions = Apollo.BaseMutationOptions<SendMessageMutation, SendMessageMutationVariables>;\r\nexport const ToggleLikePhotoDocument = gql`\r\n    mutation ToggleLikePhoto($photoId: Int!) {\r\n  toggleLikePhoto(photoId: $photoId) {\r\n    ok\r\n    message\r\n  }\r\n}\r\n    `;\r\nexport type ToggleLikePhotoMutationFn = Apollo.MutationFunction<ToggleLikePhotoMutation, ToggleLikePhotoMutationVariables>;\r\n\r\n/**\r\n * __useToggleLikePhotoMutation__\r\n *\r\n * To run a mutation, you first call `useToggleLikePhotoMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useToggleLikePhotoMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [toggleLikePhotoMutation, { data, loading, error }] = useToggleLikePhotoMutation({\r\n *   variables: {\r\n *      photoId: // value for 'photoId'\r\n *   },\r\n * });\r\n */\r\nexport function useToggleLikePhotoMutation(baseOptions?: Apollo.MutationHookOptions<ToggleLikePhotoMutation, ToggleLikePhotoMutationVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useMutation<ToggleLikePhotoMutation, ToggleLikePhotoMutationVariables>(ToggleLikePhotoDocument, options);\r\n      }\r\nexport type ToggleLikePhotoMutationHookResult = ReturnType<typeof useToggleLikePhotoMutation>;\r\nexport type ToggleLikePhotoMutationResult = Apollo.MutationResult<ToggleLikePhotoMutation>;\r\nexport type ToggleLikePhotoMutationOptions = Apollo.BaseMutationOptions<ToggleLikePhotoMutation, ToggleLikePhotoMutationVariables>;\r\nexport const UnfollowUserDocument = gql`\r\n    mutation UnfollowUser($username: String!) {\r\n  unfollowUser(username: $username) {\r\n    ok\r\n    message\r\n    user {\r\n      id\r\n      name\r\n      username\r\n    }\r\n  }\r\n}\r\n    `;\r\nexport type UnfollowUserMutationFn = Apollo.MutationFunction<UnfollowUserMutation, UnfollowUserMutationVariables>;\r\n\r\n/**\r\n * __useUnfollowUserMutation__\r\n *\r\n * To run a mutation, you first call `useUnfollowUserMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useUnfollowUserMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [unfollowUserMutation, { data, loading, error }] = useUnfollowUserMutation({\r\n *   variables: {\r\n *      username: // value for 'username'\r\n *   },\r\n * });\r\n */\r\nexport function useUnfollowUserMutation(baseOptions?: Apollo.MutationHookOptions<UnfollowUserMutation, UnfollowUserMutationVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useMutation<UnfollowUserMutation, UnfollowUserMutationVariables>(UnfollowUserDocument, options);\r\n      }\r\nexport type UnfollowUserMutationHookResult = ReturnType<typeof useUnfollowUserMutation>;\r\nexport type UnfollowUserMutationResult = Apollo.MutationResult<UnfollowUserMutation>;\r\nexport type UnfollowUserMutationOptions = Apollo.BaseMutationOptions<UnfollowUserMutation, UnfollowUserMutationVariables>;\r\nexport const UploadPhotoDocument = gql`\r\n    mutation UploadPhoto($photo: Upload!, $caption: String) {\r\n  uploadPhoto(photo: $photo, caption: $caption) {\r\n    ok\r\n    message\r\n    photo {\r\n      id\r\n      user {\r\n        id\r\n        name\r\n        username\r\n        avatarUrl\r\n      }\r\n      photoUrl\r\n      caption\r\n      hashtags {\r\n        id\r\n        name\r\n      }\r\n      totalLikes\r\n      totalComments\r\n      isMe\r\n      isLiked\r\n      createdAt\r\n    }\r\n  }\r\n}\r\n    `;\r\nexport type UploadPhotoMutationFn = Apollo.MutationFunction<UploadPhotoMutation, UploadPhotoMutationVariables>;\r\n\r\n/**\r\n * __useUploadPhotoMutation__\r\n *\r\n * To run a mutation, you first call `useUploadPhotoMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useUploadPhotoMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [uploadPhotoMutation, { data, loading, error }] = useUploadPhotoMutation({\r\n *   variables: {\r\n *      photo: // value for 'photo'\r\n *      caption: // value for 'caption'\r\n *   },\r\n * });\r\n */\r\nexport function useUploadPhotoMutation(baseOptions?: Apollo.MutationHookOptions<UploadPhotoMutation, UploadPhotoMutationVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useMutation<UploadPhotoMutation, UploadPhotoMutationVariables>(UploadPhotoDocument, options);\r\n      }\r\nexport type UploadPhotoMutationHookResult = ReturnType<typeof useUploadPhotoMutation>;\r\nexport type UploadPhotoMutationResult = Apollo.MutationResult<UploadPhotoMutation>;\r\nexport type UploadPhotoMutationOptions = Apollo.BaseMutationOptions<UploadPhotoMutation, UploadPhotoMutationVariables>;\r\nexport const SearchHashtagsDocument = gql`\r\n    query SearchHashtags($name: String!) {\r\n  searchHashtags(name: $name) {\r\n    ok\r\n    message\r\n    hashtags {\r\n      id\r\n      name\r\n      totalPhotos\r\n    }\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useSearchHashtagsQuery__\r\n *\r\n * To run a query within a React component, call `useSearchHashtagsQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useSearchHashtagsQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useSearchHashtagsQuery({\r\n *   variables: {\r\n *      name: // value for 'name'\r\n *   },\r\n * });\r\n */\r\nexport function useSearchHashtagsQuery(baseOptions: Apollo.QueryHookOptions<SearchHashtagsQuery, SearchHashtagsQueryVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useQuery<SearchHashtagsQuery, SearchHashtagsQueryVariables>(SearchHashtagsDocument, options);\r\n      }\r\nexport function useSearchHashtagsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SearchHashtagsQuery, SearchHashtagsQueryVariables>) {\r\n          const options = {...defaultOptions, ...baseOptions}\r\n          return Apollo.useLazyQuery<SearchHashtagsQuery, SearchHashtagsQueryVariables>(SearchHashtagsDocument, options);\r\n        }\r\nexport type SearchHashtagsQueryHookResult = ReturnType<typeof useSearchHashtagsQuery>;\r\nexport type SearchHashtagsLazyQueryHookResult = ReturnType<typeof useSearchHashtagsLazyQuery>;\r\nexport type SearchHashtagsQueryResult = Apollo.QueryResult<SearchHashtagsQuery, SearchHashtagsQueryVariables>;\r\nexport const SearchPhotosDocument = gql`\r\n    query SearchPhotos($keyword: String!, $cursor: Int) {\r\n  searchPhotos(keyword: $keyword, cursor: $cursor) {\r\n    ok\r\n    message\r\n    photos {\r\n      id\r\n      photoUrl\r\n      user {\r\n        id\r\n        username\r\n      }\r\n      totalLikes\r\n      totalComments\r\n    }\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useSearchPhotosQuery__\r\n *\r\n * To run a query within a React component, call `useSearchPhotosQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useSearchPhotosQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useSearchPhotosQuery({\r\n *   variables: {\r\n *      keyword: // value for 'keyword'\r\n *      cursor: // value for 'cursor'\r\n *   },\r\n * });\r\n */\r\nexport function useSearchPhotosQuery(baseOptions: Apollo.QueryHookOptions<SearchPhotosQuery, SearchPhotosQueryVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useQuery<SearchPhotosQuery, SearchPhotosQueryVariables>(SearchPhotosDocument, options);\r\n      }\r\nexport function useSearchPhotosLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SearchPhotosQuery, SearchPhotosQueryVariables>) {\r\n          const options = {...defaultOptions, ...baseOptions}\r\n          return Apollo.useLazyQuery<SearchPhotosQuery, SearchPhotosQueryVariables>(SearchPhotosDocument, options);\r\n        }\r\nexport type SearchPhotosQueryHookResult = ReturnType<typeof useSearchPhotosQuery>;\r\nexport type SearchPhotosLazyQueryHookResult = ReturnType<typeof useSearchPhotosLazyQuery>;\r\nexport type SearchPhotosQueryResult = Apollo.QueryResult<SearchPhotosQuery, SearchPhotosQueryVariables>;\r\nexport const SearchUsersDocument = gql`\r\n    query SearchUsers($username: String!, $cursor: String) {\r\n  searchUsers(username: $username, cursor: $cursor) {\r\n    ok\r\n    message\r\n    users {\r\n      id\r\n      name\r\n      username\r\n      avatarUrl\r\n    }\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useSearchUsersQuery__\r\n *\r\n * To run a query within a React component, call `useSearchUsersQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useSearchUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useSearchUsersQuery({\r\n *   variables: {\r\n *      username: // value for 'username'\r\n *      cursor: // value for 'cursor'\r\n *   },\r\n * });\r\n */\r\nexport function useSearchUsersQuery(baseOptions: Apollo.QueryHookOptions<SearchUsersQuery, SearchUsersQueryVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useQuery<SearchUsersQuery, SearchUsersQueryVariables>(SearchUsersDocument, options);\r\n      }\r\nexport function useSearchUsersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SearchUsersQuery, SearchUsersQueryVariables>) {\r\n          const options = {...defaultOptions, ...baseOptions}\r\n          return Apollo.useLazyQuery<SearchUsersQuery, SearchUsersQueryVariables>(SearchUsersDocument, options);\r\n        }\r\nexport type SearchUsersQueryHookResult = ReturnType<typeof useSearchUsersQuery>;\r\nexport type SearchUsersLazyQueryHookResult = ReturnType<typeof useSearchUsersLazyQuery>;\r\nexport type SearchUsersQueryResult = Apollo.QueryResult<SearchUsersQuery, SearchUsersQueryVariables>;\r\nexport const SeeCommentsDocument = gql`\r\n    query SeeComments($photoId: Int!, $cursor: Int) {\r\n  seeComments(photoId: $photoId, cursor: $cursor) {\r\n    ok\r\n    message\r\n    comments {\r\n      id\r\n      text\r\n      user {\r\n        id\r\n        username\r\n        name\r\n        avatarUrl\r\n        isMe\r\n        isFollowing\r\n      }\r\n      isMe\r\n      createdAt\r\n    }\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useSeeCommentsQuery__\r\n *\r\n * To run a query within a React component, call `useSeeCommentsQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useSeeCommentsQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useSeeCommentsQuery({\r\n *   variables: {\r\n *      photoId: // value for 'photoId'\r\n *      cursor: // value for 'cursor'\r\n *   },\r\n * });\r\n */\r\nexport function useSeeCommentsQuery(baseOptions: Apollo.QueryHookOptions<SeeCommentsQuery, SeeCommentsQueryVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useQuery<SeeCommentsQuery, SeeCommentsQueryVariables>(SeeCommentsDocument, options);\r\n      }\r\nexport function useSeeCommentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SeeCommentsQuery, SeeCommentsQueryVariables>) {\r\n          const options = {...defaultOptions, ...baseOptions}\r\n          return Apollo.useLazyQuery<SeeCommentsQuery, SeeCommentsQueryVariables>(SeeCommentsDocument, options);\r\n        }\r\nexport type SeeCommentsQueryHookResult = ReturnType<typeof useSeeCommentsQuery>;\r\nexport type SeeCommentsLazyQueryHookResult = ReturnType<typeof useSeeCommentsLazyQuery>;\r\nexport type SeeCommentsQueryResult = Apollo.QueryResult<SeeCommentsQuery, SeeCommentsQueryVariables>;\r\nexport const SeeFeedDocument = gql`\r\n    query SeeFeed($cursor: Int) {\r\n  seeFeed(cursor: $cursor) {\r\n    ok\r\n    message\r\n    lastPhotoId\r\n    photos {\r\n      id\r\n      photoUrl\r\n      caption\r\n      totalLikes\r\n      totalComments\r\n      isMe\r\n      isLiked\r\n      createdAt\r\n      user {\r\n        id\r\n        name\r\n        username\r\n        avatarUrl\r\n        isFollowing\r\n        isMe\r\n      }\r\n      hashtags {\r\n        id\r\n        name\r\n      }\r\n      comments {\r\n        id\r\n        text\r\n        isMe\r\n        createdAt\r\n        user {\r\n          id\r\n          username\r\n          avatarUrl\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useSeeFeedQuery__\r\n *\r\n * To run a query within a React component, call `useSeeFeedQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useSeeFeedQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useSeeFeedQuery({\r\n *   variables: {\r\n *      cursor: // value for 'cursor'\r\n *   },\r\n * });\r\n */\r\nexport function useSeeFeedQuery(baseOptions?: Apollo.QueryHookOptions<SeeFeedQuery, SeeFeedQueryVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useQuery<SeeFeedQuery, SeeFeedQueryVariables>(SeeFeedDocument, options);\r\n      }\r\nexport function useSeeFeedLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SeeFeedQuery, SeeFeedQueryVariables>) {\r\n          const options = {...defaultOptions, ...baseOptions}\r\n          return Apollo.useLazyQuery<SeeFeedQuery, SeeFeedQueryVariables>(SeeFeedDocument, options);\r\n        }\r\nexport type SeeFeedQueryHookResult = ReturnType<typeof useSeeFeedQuery>;\r\nexport type SeeFeedLazyQueryHookResult = ReturnType<typeof useSeeFeedLazyQuery>;\r\nexport type SeeFeedQueryResult = Apollo.QueryResult<SeeFeedQuery, SeeFeedQueryVariables>;\r\nexport const SeeMeDocument = gql`\r\n    query SeeMe {\r\n  seeMe {\r\n    ok\r\n    message\r\n    user {\r\n      id\r\n      name\r\n      username\r\n      email\r\n      avatarUrl\r\n      bio\r\n      isMe\r\n    }\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useSeeMeQuery__\r\n *\r\n * To run a query within a React component, call `useSeeMeQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useSeeMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useSeeMeQuery({\r\n *   variables: {\r\n *   },\r\n * });\r\n */\r\nexport function useSeeMeQuery(baseOptions?: Apollo.QueryHookOptions<SeeMeQuery, SeeMeQueryVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useQuery<SeeMeQuery, SeeMeQueryVariables>(SeeMeDocument, options);\r\n      }\r\nexport function useSeeMeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SeeMeQuery, SeeMeQueryVariables>) {\r\n          const options = {...defaultOptions, ...baseOptions}\r\n          return Apollo.useLazyQuery<SeeMeQuery, SeeMeQueryVariables>(SeeMeDocument, options);\r\n        }\r\nexport type SeeMeQueryHookResult = ReturnType<typeof useSeeMeQuery>;\r\nexport type SeeMeLazyQueryHookResult = ReturnType<typeof useSeeMeLazyQuery>;\r\nexport type SeeMeQueryResult = Apollo.QueryResult<SeeMeQuery, SeeMeQueryVariables>;\r\nexport const SeePhotoDocument = gql`\r\n    query SeePhoto($photoId: Int!) {\r\n  seePhoto(photoId: $photoId) {\r\n    ok\r\n    message\r\n    photo {\r\n      id\r\n      user {\r\n        id\r\n        name\r\n        username\r\n        avatarUrl\r\n        isFollowing\r\n        isMe\r\n      }\r\n      photoUrl\r\n      caption\r\n      totalLikes\r\n      totalComments\r\n      isMe\r\n      isLiked\r\n      createdAt\r\n    }\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useSeePhotoQuery__\r\n *\r\n * To run a query within a React component, call `useSeePhotoQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useSeePhotoQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useSeePhotoQuery({\r\n *   variables: {\r\n *      photoId: // value for 'photoId'\r\n *   },\r\n * });\r\n */\r\nexport function useSeePhotoQuery(baseOptions: Apollo.QueryHookOptions<SeePhotoQuery, SeePhotoQueryVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useQuery<SeePhotoQuery, SeePhotoQueryVariables>(SeePhotoDocument, options);\r\n      }\r\nexport function useSeePhotoLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SeePhotoQuery, SeePhotoQueryVariables>) {\r\n          const options = {...defaultOptions, ...baseOptions}\r\n          return Apollo.useLazyQuery<SeePhotoQuery, SeePhotoQueryVariables>(SeePhotoDocument, options);\r\n        }\r\nexport type SeePhotoQueryHookResult = ReturnType<typeof useSeePhotoQuery>;\r\nexport type SeePhotoLazyQueryHookResult = ReturnType<typeof useSeePhotoLazyQuery>;\r\nexport type SeePhotoQueryResult = Apollo.QueryResult<SeePhotoQuery, SeePhotoQueryVariables>;\r\nexport const SeePhotoLikesDocument = gql`\r\n    query SeePhotoLikes($photoId: Int!, $cursor: String) {\r\n  seePhotoLikes(photoId: $photoId, cursor: $cursor) {\r\n    ok\r\n    message\r\n    users {\r\n      id\r\n      name\r\n      username\r\n      avatarUrl\r\n      isFollowing\r\n      isMe\r\n    }\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useSeePhotoLikesQuery__\r\n *\r\n * To run a query within a React component, call `useSeePhotoLikesQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useSeePhotoLikesQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useSeePhotoLikesQuery({\r\n *   variables: {\r\n *      photoId: // value for 'photoId'\r\n *      cursor: // value for 'cursor'\r\n *   },\r\n * });\r\n */\r\nexport function useSeePhotoLikesQuery(baseOptions: Apollo.QueryHookOptions<SeePhotoLikesQuery, SeePhotoLikesQueryVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useQuery<SeePhotoLikesQuery, SeePhotoLikesQueryVariables>(SeePhotoLikesDocument, options);\r\n      }\r\nexport function useSeePhotoLikesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SeePhotoLikesQuery, SeePhotoLikesQueryVariables>) {\r\n          const options = {...defaultOptions, ...baseOptions}\r\n          return Apollo.useLazyQuery<SeePhotoLikesQuery, SeePhotoLikesQueryVariables>(SeePhotoLikesDocument, options);\r\n        }\r\nexport type SeePhotoLikesQueryHookResult = ReturnType<typeof useSeePhotoLikesQuery>;\r\nexport type SeePhotoLikesLazyQueryHookResult = ReturnType<typeof useSeePhotoLikesLazyQuery>;\r\nexport type SeePhotoLikesQueryResult = Apollo.QueryResult<SeePhotoLikesQuery, SeePhotoLikesQueryVariables>;\r\nexport const SeeProfileDocument = gql`\r\n    query SeeProfile($username: String!, $cursor: Int) {\r\n  seeProfile(username: $username) {\r\n    ok\r\n    message\r\n    user {\r\n      id\r\n      name\r\n      username\r\n      bio\r\n      avatarUrl\r\n      totalFollowing\r\n      totalFollowers\r\n      totalPhotos\r\n      isFollowing\r\n      isMe\r\n      photos(cursor: $cursor) {\r\n        id\r\n        user {\r\n          id\r\n          name\r\n          username\r\n          avatarUrl\r\n        }\r\n        photoUrl\r\n        isLiked\r\n        totalLikes\r\n        totalComments\r\n        caption\r\n        createdAt\r\n      }\r\n      following {\r\n        id\r\n        name\r\n        username\r\n        avatarUrl\r\n        isFollowing\r\n      }\r\n      followers {\r\n        id\r\n        name\r\n        username\r\n        avatarUrl\r\n        isFollowing\r\n      }\r\n    }\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useSeeProfileQuery__\r\n *\r\n * To run a query within a React component, call `useSeeProfileQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useSeeProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useSeeProfileQuery({\r\n *   variables: {\r\n *      username: // value for 'username'\r\n *      cursor: // value for 'cursor'\r\n *   },\r\n * });\r\n */\r\nexport function useSeeProfileQuery(baseOptions: Apollo.QueryHookOptions<SeeProfileQuery, SeeProfileQueryVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useQuery<SeeProfileQuery, SeeProfileQueryVariables>(SeeProfileDocument, options);\r\n      }\r\nexport function useSeeProfileLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SeeProfileQuery, SeeProfileQueryVariables>) {\r\n          const options = {...defaultOptions, ...baseOptions}\r\n          return Apollo.useLazyQuery<SeeProfileQuery, SeeProfileQueryVariables>(SeeProfileDocument, options);\r\n        }\r\nexport type SeeProfileQueryHookResult = ReturnType<typeof useSeeProfileQuery>;\r\nexport type SeeProfileLazyQueryHookResult = ReturnType<typeof useSeeProfileLazyQuery>;\r\nexport type SeeProfileQueryResult = Apollo.QueryResult<SeeProfileQuery, SeeProfileQueryVariables>;\r\nexport const SeeRecommendPhotosDocument = gql`\r\n    query SeeRecommendPhotos {\r\n  seeRecommendPhotos {\r\n    ok\r\n    message\r\n    photos {\r\n      id\r\n      photoUrl\r\n      caption\r\n      totalLikes\r\n      totalComments\r\n      isMe\r\n      isLiked\r\n      createdAt\r\n      user {\r\n        id\r\n        name\r\n        username\r\n        avatarUrl\r\n      }\r\n      hashtags {\r\n        id\r\n        name\r\n      }\r\n      comments {\r\n        id\r\n        text\r\n        isMe\r\n        createdAt\r\n        user {\r\n          id\r\n          username\r\n          avatarUrl\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useSeeRecommendPhotosQuery__\r\n *\r\n * To run a query within a React component, call `useSeeRecommendPhotosQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useSeeRecommendPhotosQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useSeeRecommendPhotosQuery({\r\n *   variables: {\r\n *   },\r\n * });\r\n */\r\nexport function useSeeRecommendPhotosQuery(baseOptions?: Apollo.QueryHookOptions<SeeRecommendPhotosQuery, SeeRecommendPhotosQueryVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useQuery<SeeRecommendPhotosQuery, SeeRecommendPhotosQueryVariables>(SeeRecommendPhotosDocument, options);\r\n      }\r\nexport function useSeeRecommendPhotosLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SeeRecommendPhotosQuery, SeeRecommendPhotosQueryVariables>) {\r\n          const options = {...defaultOptions, ...baseOptions}\r\n          return Apollo.useLazyQuery<SeeRecommendPhotosQuery, SeeRecommendPhotosQueryVariables>(SeeRecommendPhotosDocument, options);\r\n        }\r\nexport type SeeRecommendPhotosQueryHookResult = ReturnType<typeof useSeeRecommendPhotosQuery>;\r\nexport type SeeRecommendPhotosLazyQueryHookResult = ReturnType<typeof useSeeRecommendPhotosLazyQuery>;\r\nexport type SeeRecommendPhotosQueryResult = Apollo.QueryResult<SeeRecommendPhotosQuery, SeeRecommendPhotosQueryVariables>;\r\nexport const SeeRoomDocument = gql`\r\n    query SeeRoom($roomId: Int!) {\r\n  seeRoom(roomId: $roomId) {\r\n    ok\r\n    message\r\n    room {\r\n      id\r\n      users {\r\n        id\r\n        name\r\n        username\r\n        avatarUrl\r\n        isFollowing\r\n        isMe\r\n      }\r\n      messages {\r\n        id\r\n        text\r\n        read\r\n        createdAt\r\n        user {\r\n          id\r\n          username\r\n          avatarUrl\r\n          isMe\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useSeeRoomQuery__\r\n *\r\n * To run a query within a React component, call `useSeeRoomQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useSeeRoomQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useSeeRoomQuery({\r\n *   variables: {\r\n *      roomId: // value for 'roomId'\r\n *   },\r\n * });\r\n */\r\nexport function useSeeRoomQuery(baseOptions: Apollo.QueryHookOptions<SeeRoomQuery, SeeRoomQueryVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useQuery<SeeRoomQuery, SeeRoomQueryVariables>(SeeRoomDocument, options);\r\n      }\r\nexport function useSeeRoomLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SeeRoomQuery, SeeRoomQueryVariables>) {\r\n          const options = {...defaultOptions, ...baseOptions}\r\n          return Apollo.useLazyQuery<SeeRoomQuery, SeeRoomQueryVariables>(SeeRoomDocument, options);\r\n        }\r\nexport type SeeRoomQueryHookResult = ReturnType<typeof useSeeRoomQuery>;\r\nexport type SeeRoomLazyQueryHookResult = ReturnType<typeof useSeeRoomLazyQuery>;\r\nexport type SeeRoomQueryResult = Apollo.QueryResult<SeeRoomQuery, SeeRoomQueryVariables>;\r\nexport const SeeRoomsDocument = gql`\r\n    query SeeRooms {\r\n  seeRooms {\r\n    ok\r\n    message\r\n    rooms {\r\n      id\r\n      users {\r\n        id\r\n        name\r\n        username\r\n        avatarUrl\r\n        isFollowing\r\n        isMe\r\n      }\r\n      messages {\r\n        id\r\n        text\r\n        createdAt\r\n      }\r\n      totalUnreadMessages\r\n      latestMessage {\r\n        id\r\n        text\r\n        createdAt\r\n      }\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useSeeRoomsQuery__\r\n *\r\n * To run a query within a React component, call `useSeeRoomsQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useSeeRoomsQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useSeeRoomsQuery({\r\n *   variables: {\r\n *   },\r\n * });\r\n */\r\nexport function useSeeRoomsQuery(baseOptions?: Apollo.QueryHookOptions<SeeRoomsQuery, SeeRoomsQueryVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useQuery<SeeRoomsQuery, SeeRoomsQueryVariables>(SeeRoomsDocument, options);\r\n      }\r\nexport function useSeeRoomsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SeeRoomsQuery, SeeRoomsQueryVariables>) {\r\n          const options = {...defaultOptions, ...baseOptions}\r\n          return Apollo.useLazyQuery<SeeRoomsQuery, SeeRoomsQueryVariables>(SeeRoomsDocument, options);\r\n        }\r\nexport type SeeRoomsQueryHookResult = ReturnType<typeof useSeeRoomsQuery>;\r\nexport type SeeRoomsLazyQueryHookResult = ReturnType<typeof useSeeRoomsLazyQuery>;\r\nexport type SeeRoomsQueryResult = Apollo.QueryResult<SeeRoomsQuery, SeeRoomsQueryVariables>;\r\nexport const MessageUpdatesDocument = gql`\r\n    subscription MessageUpdates($roomId: Int!) {\r\n  messageUpdates(roomId: $roomId) {\r\n    id\r\n    text\r\n    read\r\n    user {\r\n      id\r\n      username\r\n      avatarUrl\r\n    }\r\n    createdAt\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useMessageUpdatesSubscription__\r\n *\r\n * To run a query within a React component, call `useMessageUpdatesSubscription` and pass it any options that fit your needs.\r\n * When your component renders, `useMessageUpdatesSubscription` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useMessageUpdatesSubscription({\r\n *   variables: {\r\n *      roomId: // value for 'roomId'\r\n *   },\r\n * });\r\n */\r\nexport function useMessageUpdatesSubscription(baseOptions: Apollo.SubscriptionHookOptions<MessageUpdatesSubscription, MessageUpdatesSubscriptionVariables>) {\r\n        const options = {...defaultOptions, ...baseOptions}\r\n        return Apollo.useSubscription<MessageUpdatesSubscription, MessageUpdatesSubscriptionVariables>(MessageUpdatesDocument, options);\r\n      }\r\nexport type MessageUpdatesSubscriptionHookResult = ReturnType<typeof useMessageUpdatesSubscription>;\r\nexport type MessageUpdatesSubscriptionResult = Apollo.SubscriptionResult<MessageUpdatesSubscription>;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}