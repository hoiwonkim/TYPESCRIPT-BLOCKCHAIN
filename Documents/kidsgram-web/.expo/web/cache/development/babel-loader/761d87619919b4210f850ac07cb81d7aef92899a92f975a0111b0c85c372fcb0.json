{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\nvar _templateObject, _templateObject2;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Loading from \"../components/Loading\";\nimport styled from \"styled-components/native\";\nimport RoomItem from \"../components/RoomItem\";\nimport useLoggedInUser from \"../hooks/useLoggedInUser\";\nimport { useState } from \"react\";\nimport { useSeeRoomsQuery } from \"../generated/graphql\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar Container = styled.View(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n  background-color: \", \";\\n  flex: 1;\\n  justify-content: center;\\n  align-items: center;\\n\"])), function (props) {\n  return props.theme.bgColor;\n});\nvar FlatListContainer = styled.FlatList(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n  width: 100%;\\n\"])));\nvar Rooms = function Rooms() {\n  var loggedInUser = useLoggedInUser();\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    refreshing = _useState2[0],\n    setRefreshing = _useState2[1];\n  var _useSeeRoomsQuery = useSeeRoomsQuery(),\n    seeRoomsData = _useSeeRoomsQuery.data,\n    seeRoomsLoading = _useSeeRoomsQuery.loading,\n    refetch = _useSeeRoomsQuery.refetch;\n  var onRefresh = function onRefresh() {\n    return _regeneratorRuntime.async(function onRefresh$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          setRefreshing(true);\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(refetch());\n        case 3:\n          setRefreshing(false);\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }, null, null, null, Promise);\n  };\n  var renderItem = function renderItem(_ref) {\n    var room = _ref.item;\n    var otherUser = room.users.find(function (user) {\n      return user.username !== (loggedInUser == null ? void 0 : loggedInUser.username);\n    });\n    return _jsx(RoomItem, _objectSpread(_objectSpread({}, room), {}, {\n      otherUser: otherUser,\n      latestMessage: room.latestMessage\n    }));\n  };\n  return _jsx(Container, {\n    children: seeRoomsLoading === true ? _jsx(Loading, {}) : _jsx(FlatListContainer, {\n      showsVerticalScrollIndicator: false,\n      refreshing: refreshing,\n      onRefresh: onRefresh,\n      data: seeRoomsData == null ? void 0 : seeRoomsData.seeRooms.rooms,\n      renderItem: renderItem,\n      keyExtractor: function keyExtractor(room) {\n        return String(room.id);\n      }\n    })\n  });\n};\nexport default Rooms;","map":{"version":3,"names":["Loading","styled","RoomItem","useLoggedInUser","useState","useSeeRoomsQuery","jsx","_jsx","Container","View","_templateObject","_taggedTemplateLiteralLoose","props","theme","bgColor","FlatListContainer","FlatList","_templateObject2","Rooms","loggedInUser","_useState","_useState2","_slicedToArray","refreshing","setRefreshing","_useSeeRoomsQuery","seeRoomsData","data","seeRoomsLoading","loading","refetch","onRefresh","_regeneratorRuntime","async","onRefresh$","_context","prev","next","awrap","stop","Promise","renderItem","_ref","room","item","otherUser","users","find","user","username","_objectSpread","latestMessage","children","showsVerticalScrollIndicator","seeRooms","rooms","keyExtractor","String","id"],"sources":["C:/Users/GGPC/Documents/kidsgram-web/screens/Rooms.tsx"],"sourcesContent":["import Loading from \"../components/Loading\";\r\nimport styled from \"styled-components/native\";\r\nimport RoomItem from \"../components/RoomItem\";\r\nimport useLoggedInUser from \"../hooks/useLoggedInUser\";\r\nimport { useState } from \"react\";\r\nimport { useSeeRoomsQuery } from \"../generated/graphql\";\r\n\r\nconst Container = styled.View`\r\n  background-color: ${(props) => props.theme.bgColor};\r\n  flex: 1;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst FlatListContainer = styled.FlatList`\r\n  width: 100%;\r\n`;\r\n\r\nconst Rooms = () => {\r\n  const loggedInUser = useLoggedInUser();\r\n  const [refreshing, setRefreshing] = useState<boolean>(false);\r\n  const { data: seeRoomsData, loading: seeRoomsLoading, refetch } = useSeeRoomsQuery();\r\n\r\n  const onRefresh = async (): Promise<void> => {\r\n    setRefreshing(true);\r\n    await refetch();\r\n    setRefreshing(false);\r\n  };\r\n\r\n  const renderItem = ({ item: room }: any) => {\r\n    const otherUser = room.users.find((user: any) => user.username !== loggedInUser?.username);\r\n    return <RoomItem {...room} otherUser={otherUser} latestMessage={room.latestMessage} />;\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      {seeRoomsLoading === true ? (\r\n        <Loading />\r\n      ) : (\r\n        <FlatListContainer\r\n          showsVerticalScrollIndicator={false}\r\n          refreshing={refreshing}\r\n          onRefresh={onRefresh}\r\n          data={seeRoomsData?.seeRooms.rooms}\r\n          renderItem={renderItem}\r\n          keyExtractor={(room: any) => String(room.id)}\r\n        ></FlatListContainer>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Rooms;"],"mappings":";;;;;;;AAAA,OAAOA,OAAO;AACd,OAAOC,MAAM,MAAM,0BAA0B;AAC7C,OAAOC,QAAQ;AACf,OAAOC,eAAe;AACtB,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,gBAAgB;AAA+B,SAAAC,GAAA,IAAAC,IAAA;AAExD,IAAMC,SAAS,GAAGP,MAAM,CAACQ,IAAI,CAAAC,eAAA,KAAAA,eAAA,GAAAC,2BAAA,sGACP,UAACC,KAAK;EAAA,OAAKA,KAAK,CAACC,KAAK,CAACC,OAAO;AAAA,EAInD;AAED,IAAMC,iBAAiB,GAAGd,MAAM,CAACe,QAAQ,CAAAC,gBAAA,KAAAA,gBAAA,GAAAN,2BAAA,0BAExC;AAED,IAAMO,KAAK,GAAG,SAARA,KAAKA,CAAA,EAAS;EAClB,IAAMC,YAAY,GAAGhB,eAAe,CAAC,CAAC;EACtC,IAAAiB,SAAA,GAAoChB,QAAQ,CAAU,KAAK,CAAC;IAAAiB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAArDG,UAAU,GAAAF,UAAA;IAAEG,aAAa,GAAAH,UAAA;EAChC,IAAAI,iBAAA,GAAkEpB,gBAAgB,CAAC,CAAC;IAAtEqB,YAAY,GAAAD,iBAAA,CAAlBE,IAAI;IAAyBC,eAAe,GAAAH,iBAAA,CAAxBI,OAAO;IAAmBC,OAAO,GAAAL,iBAAA,CAAPK,OAAO;EAE7D,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAA;IAAA,OAAAC,mBAAA,CAAAC,KAAA,UAAAC,WAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UACbb,aAAa,CAAC,IAAI,CAAC;UAACW,QAAA,CAAAE,IAAA;UAAA,OAAAL,mBAAA,CAAAM,KAAA,CACdR,OAAO,CAAC,CAAC;QAAA;UACfN,aAAa,CAAC,KAAK,CAAC;QAAC;QAAA;UAAA,OAAAW,QAAA,CAAAI,IAAA;MAAA;IAAA,qBAAAC,OAAA;EAAA,CACtB;EAED,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAAC,IAAA,EAA4B;IAAA,IAAhBC,IAAI,GAAAD,IAAA,CAAVE,IAAI;IACxB,IAAMC,SAAS,GAAGF,IAAI,CAACG,KAAK,CAACC,IAAI,CAAC,UAACC,IAAS;MAAA,OAAKA,IAAI,CAACC,QAAQ,MAAK9B,YAAY,oBAAZA,YAAY,CAAE8B,QAAQ;IAAA,EAAC;IAC1F,OAAO1C,IAAA,CAACL,QAAQ,EAAAgD,aAAA,CAAAA,aAAA,KAAKP,IAAI;MAAEE,SAAS,EAAEA,SAAU;MAACM,aAAa,EAAER,IAAI,CAACQ;IAAc,EAAE,CAAC;EACxF,CAAC;EAED,OACE5C,IAAA,CAACC,SAAS;IAAA4C,QAAA,EACPxB,eAAe,KAAK,IAAI,GACvBrB,IAAA,CAACP,OAAO,IAAE,CAAC,GAEXO,IAAA,CAACQ,iBAAiB;MAChBsC,4BAA4B,EAAE,KAAM;MACpC9B,UAAU,EAAEA,UAAW;MACvBQ,SAAS,EAAEA,SAAU;MACrBJ,IAAI,EAAED,YAAY,oBAAZA,YAAY,CAAE4B,QAAQ,CAACC,KAAM;MACnCd,UAAU,EAAEA,UAAW;MACvBe,YAAY,EAAE,SAAAA,aAACb,IAAS;QAAA,OAAKc,MAAM,CAACd,IAAI,CAACe,EAAE,CAAC;MAAA;IAAC,CAC3B;EACrB,CACQ,CAAC;AAEhB,CAAC;AAED,eAAexC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}