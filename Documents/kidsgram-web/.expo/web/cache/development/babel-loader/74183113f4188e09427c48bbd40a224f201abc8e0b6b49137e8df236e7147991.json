{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar _Reanimated$default$c, _Reanimated$default;\nimport React, { useEffect, useRef } from 'react';\nimport { BaseGesture, CALLBACK_TYPE } from \"./gesture\";\nimport { Reanimated } from \"./reanimatedWrapper\";\nimport { registerHandler, unregisterHandler } from \"../handlersRegistry\";\nimport RNGestureHandlerModule from \"../../RNGestureHandlerModule\";\nimport { baseGestureHandlerWithMonitorProps, filterConfig, findNodeHandle } from \"../gestureHandlerCommon\";\nimport { GestureStateManager } from \"./gestureStateManager\";\nimport { flingGestureHandlerProps } from \"../FlingGestureHandler\";\nimport { forceTouchGestureHandlerProps } from \"../ForceTouchGestureHandler\";\nimport { longPressGestureHandlerProps } from \"../LongPressGestureHandler\";\nimport { panGestureHandlerProps, panGestureHandlerCustomNativeProps } from \"../PanGestureHandler\";\nimport { tapGestureHandlerProps } from \"../TapGestureHandler\";\nimport { State } from \"../../State\";\nimport { EventType } from \"../../EventType\";\nvar ALLOWED_PROPS = [].concat(_toConsumableArray(baseGestureHandlerWithMonitorProps), _toConsumableArray(tapGestureHandlerProps), _toConsumableArray(panGestureHandlerProps), _toConsumableArray(panGestureHandlerCustomNativeProps), _toConsumableArray(longPressGestureHandlerProps), _toConsumableArray(forceTouchGestureHandlerProps), _toConsumableArray(flingGestureHandlerProps));\nfunction convertToHandlerTag(ref) {\n  if (typeof ref === 'number') {\n    return ref;\n  } else if (ref instanceof BaseGesture) {\n    return ref.handlerTag;\n  } else {\n    var _ref$current$handlerT, _ref$current;\n    return (_ref$current$handlerT = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.handlerTag) !== null && _ref$current$handlerT !== void 0 ? _ref$current$handlerT : -1;\n  }\n}\nfunction extractValidHandlerTags(interactionGroup) {\n  var _interactionGroup$map, _interactionGroup$map2;\n  return (_interactionGroup$map = interactionGroup === null || interactionGroup === void 0 ? void 0 : (_interactionGroup$map2 = interactionGroup.map(convertToHandlerTag)) === null || _interactionGroup$map2 === void 0 ? void 0 : _interactionGroup$map2.filter(function (tag) {\n    return tag > 0;\n  })) !== null && _interactionGroup$map !== void 0 ? _interactionGroup$map : [];\n}\nfunction dropHandlers(preparedGesture) {\n  for (var _iterator = _createForOfIteratorHelperLoose(preparedGesture.config), _step; !(_step = _iterator()).done;) {\n    var handler = _step.value;\n    RNGestureHandlerModule.dropGestureHandler(handler.handlerTag);\n    unregisterHandler(handler.handlerTag);\n  }\n}\nfunction attachHandlers(_ref) {\n  var preparedGesture = _ref.preparedGesture,\n    gestureConfig = _ref.gestureConfig,\n    gesture = _ref.gesture,\n    viewTag = _ref.viewTag,\n    useAnimated = _ref.useAnimated;\n  if (!preparedGesture.firstExecution) {\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.initialize();\n  } else {\n    preparedGesture.firstExecution = false;\n  }\n  setImmediate(function () {\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.prepare();\n  });\n  var _loop = function _loop(handler) {\n    RNGestureHandlerModule.createGestureHandler(handler.handlerName, handler.handlerTag, filterConfig(handler.config, ALLOWED_PROPS));\n    registerHandler(handler.handlerTag, handler);\n    setImmediate(function () {\n      var requireToFail = [];\n      if (handler.config.requireToFail) {\n        requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n      }\n      var simultaneousWith = [];\n      if (handler.config.simultaneousWith) {\n        simultaneousWith = extractValidHandlerTags(handler.config.simultaneousWith);\n      }\n      RNGestureHandlerModule.updateGestureHandler(handler.handlerTag, filterConfig(handler.config, ALLOWED_PROPS, {\n        simultaneousHandlers: simultaneousWith,\n        waitFor: requireToFail\n      }));\n    });\n  };\n  for (var _iterator2 = _createForOfIteratorHelperLoose(gesture), _step2; !(_step2 = _iterator2()).done;) {\n    var handler = _step2.value;\n    _loop(handler);\n  }\n  preparedGesture.config = gesture;\n  for (var _iterator3 = _createForOfIteratorHelperLoose(preparedGesture.config), _step3; !(_step3 = _iterator3()).done;) {\n    var _gesture = _step3.value;\n    RNGestureHandlerModule.attachGestureHandler(_gesture.handlerTag, viewTag, !useAnimated);\n  }\n  if (preparedGesture.animatedHandlers) {\n    preparedGesture.animatedHandlers.value = gesture.map(function (g) {\n      return g.handlers;\n    });\n  }\n}\nfunction updateHandlers(preparedGesture, gestureConfig, gesture) {\n  gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.prepare();\n  for (var i = 0; i < gesture.length; i++) {\n    var handler = preparedGesture.config[i];\n    gesture[i].handlerTag = handler.handlerTag;\n    gesture[i].handlers.handlerTag = handler.handlerTag;\n  }\n  setImmediate(function () {\n    for (var _i = 0; _i < gesture.length; _i++) {\n      var _handler = preparedGesture.config[_i];\n      _handler.config = gesture[_i].config;\n      _handler.handlers = gesture[_i].handlers;\n      _handler.handlers.handlerTag = _handler.handlerTag;\n      var requireToFail = extractValidHandlerTags(_handler.config.requireToFail);\n      var simultaneousWith = extractValidHandlerTags(_handler.config.simultaneousWith);\n      RNGestureHandlerModule.updateGestureHandler(_handler.handlerTag, filterConfig(_handler.config, ALLOWED_PROPS, {\n        simultaneousHandlers: simultaneousWith,\n        waitFor: requireToFail\n      }));\n      registerHandler(_handler.handlerTag, _handler);\n    }\n    if (preparedGesture.animatedHandlers) {\n      preparedGesture.animatedHandlers.value = preparedGesture.config.map(function (g) {\n        return g.handlers;\n      });\n    }\n  });\n}\nfunction needsToReattach(preparedGesture, gesture) {\n  if (gesture.length !== preparedGesture.config.length) {\n    return true;\n  }\n  for (var i = 0; i < gesture.length; i++) {\n    if (gesture[i].handlerName !== preparedGesture.config[i].handlerName) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction useAnimatedGesture(preparedGesture) {\n  if (!Reanimated) {\n    return;\n  }\n  var isStateChangeEvent = function () {\n    var _f = function _f(event) {\n      return event.oldState != null;\n    };\n    _f._closure = {};\n    _f.asString = \"function isStateChangeEvent(event){return event.oldState!=null;}\";\n    _f.__workletHash = 13883357260557;\n    _f.__location = \"C:\\\\Users\\\\GGPC\\\\Documents\\\\kidsgram-web\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\GestureDetector.js (154:2)\";\n    global.__reanimatedWorkletInit(_f);\n    return _f;\n  }();\n  var isTouchEvent = function () {\n    var _f = function _f(event) {\n      return event.eventType != null;\n    };\n    _f._closure = {};\n    _f.asString = \"function isTouchEvent(event){return event.eventType!=null;}\";\n    _f.__workletHash = 15872269086045;\n    _f.__location = \"C:\\\\Users\\\\GGPC\\\\Documents\\\\kidsgram-web\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\GestureDetector.js (160:2)\";\n    global.__reanimatedWorkletInit(_f);\n    return _f;\n  }();\n  var getHandler = function () {\n    var _f = function _f(type, gesture) {\n      switch (type) {\n        case CALLBACK_TYPE.BEGAN:\n          return gesture.onBegin;\n        case CALLBACK_TYPE.START:\n          return gesture.onStart;\n        case CALLBACK_TYPE.UPDATE:\n          return gesture.onUpdate;\n        case CALLBACK_TYPE.CHANGE:\n          return gesture.onChange;\n        case CALLBACK_TYPE.END:\n          return gesture.onEnd;\n        case CALLBACK_TYPE.FINALIZE:\n          return gesture.onFinalize;\n        case CALLBACK_TYPE.TOUCHES_DOWN:\n          return gesture.onTouchesDown;\n        case CALLBACK_TYPE.TOUCHES_MOVE:\n          return gesture.onTouchesMove;\n        case CALLBACK_TYPE.TOUCHES_UP:\n          return gesture.onTouchesUp;\n        case CALLBACK_TYPE.TOUCHES_CANCELLED:\n          return gesture.onTouchesCancelled;\n      }\n    };\n    _f._closure = {\n      CALLBACK_TYPE: {\n        BEGAN: CALLBACK_TYPE.BEGAN,\n        START: CALLBACK_TYPE.START,\n        UPDATE: CALLBACK_TYPE.UPDATE,\n        CHANGE: CALLBACK_TYPE.CHANGE,\n        END: CALLBACK_TYPE.END,\n        FINALIZE: CALLBACK_TYPE.FINALIZE,\n        TOUCHES_DOWN: CALLBACK_TYPE.TOUCHES_DOWN,\n        TOUCHES_MOVE: CALLBACK_TYPE.TOUCHES_MOVE,\n        TOUCHES_UP: CALLBACK_TYPE.TOUCHES_UP,\n        TOUCHES_CANCELLED: CALLBACK_TYPE.TOUCHES_CANCELLED\n      }\n    };\n    _f.asString = \"function getHandler(type,gesture){const{CALLBACK_TYPE}=jsThis._closure;{switch(type){case CALLBACK_TYPE.BEGAN:return gesture.onBegin;case CALLBACK_TYPE.START:return gesture.onStart;case CALLBACK_TYPE.UPDATE:return gesture.onUpdate;case CALLBACK_TYPE.CHANGE:return gesture.onChange;case CALLBACK_TYPE.END:return gesture.onEnd;case CALLBACK_TYPE.FINALIZE:return gesture.onFinalize;case CALLBACK_TYPE.TOUCHES_DOWN:return gesture.onTouchesDown;case CALLBACK_TYPE.TOUCHES_MOVE:return gesture.onTouchesMove;case CALLBACK_TYPE.TOUCHES_UP:return gesture.onTouchesUp;case CALLBACK_TYPE.TOUCHES_CANCELLED:return gesture.onTouchesCancelled;}}}\";\n    _f.__workletHash = 13033906201160;\n    _f.__location = \"C:\\\\Users\\\\GGPC\\\\Documents\\\\kidsgram-web\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\GestureDetector.js (166:2)\";\n    global.__reanimatedWorkletInit(_f);\n    return _f;\n  }();\n  var touchEventTypeToCallbackType = function () {\n    var _f = function _f(eventType) {\n      switch (eventType) {\n        case EventType.TOUCHES_DOWN:\n          return CALLBACK_TYPE.TOUCHES_DOWN;\n        case EventType.TOUCHES_MOVE:\n          return CALLBACK_TYPE.TOUCHES_MOVE;\n        case EventType.TOUCHES_UP:\n          return CALLBACK_TYPE.TOUCHES_UP;\n        case EventType.TOUCHES_CANCELLED:\n          return CALLBACK_TYPE.TOUCHES_CANCELLED;\n      }\n      return CALLBACK_TYPE.UNDEFINED;\n    };\n    _f._closure = {\n      EventType: {\n        TOUCHES_DOWN: EventType.TOUCHES_DOWN,\n        TOUCHES_MOVE: EventType.TOUCHES_MOVE,\n        TOUCHES_UP: EventType.TOUCHES_UP,\n        TOUCHES_CANCELLED: EventType.TOUCHES_CANCELLED\n      },\n      CALLBACK_TYPE: {\n        TOUCHES_DOWN: CALLBACK_TYPE.TOUCHES_DOWN,\n        TOUCHES_MOVE: CALLBACK_TYPE.TOUCHES_MOVE,\n        TOUCHES_UP: CALLBACK_TYPE.TOUCHES_UP,\n        TOUCHES_CANCELLED: CALLBACK_TYPE.TOUCHES_CANCELLED,\n        UNDEFINED: CALLBACK_TYPE.UNDEFINED\n      }\n    };\n    _f.asString = \"function touchEventTypeToCallbackType(eventType){const{EventType,CALLBACK_TYPE}=jsThis._closure;{switch(eventType){case EventType.TOUCHES_DOWN:return CALLBACK_TYPE.TOUCHES_DOWN;case EventType.TOUCHES_MOVE:return CALLBACK_TYPE.TOUCHES_MOVE;case EventType.TOUCHES_UP:return CALLBACK_TYPE.TOUCHES_UP;case EventType.TOUCHES_CANCELLED:return CALLBACK_TYPE.TOUCHES_CANCELLED;}return CALLBACK_TYPE.UNDEFINED;}}\";\n    _f.__workletHash = 4665487911277;\n    _f.__location = \"C:\\\\Users\\\\GGPC\\\\Documents\\\\kidsgram-web\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\GestureDetector.js (202:2)\";\n    global.__reanimatedWorkletInit(_f);\n    return _f;\n  }();\n  var runWorklet = function () {\n    var _f = function _f(type, gesture, event) {\n      var handler = getHandler(type, gesture);\n      if (gesture.isWorklet[type]) {\n        for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n          args[_key - 3] = arguments[_key];\n        }\n        handler === null || handler === void 0 ? void 0 : handler.apply(void 0, [event].concat(args));\n      } else if (handler) {\n        console.warn('Animated gesture callback must be a worklet');\n      }\n    };\n    _f._closure = {\n      getHandler: getHandler\n    };\n    _f.asString = \"function runWorklet(type,gesture,event){const{getHandler}=jsThis._closure;{var handler=getHandler(type,gesture);if(gesture.isWorklet[type]){for(var _len=arguments.length,args=new Array(_len>3?_len-3:0),_key=3;_key<_len;_key++){args[_key-3]=arguments[_key];}handler===null||handler===void 0?void 0:handler.apply(void 0,[event].concat(args));}else if(handler){console.warn('Animated gesture callback must be a worklet');}}}\";\n    _f.__workletHash = 10946792106953;\n    _f.__location = \"C:\\\\Users\\\\GGPC\\\\Documents\\\\kidsgram-web\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\GestureDetector.js (222:2)\";\n    global.__reanimatedWorkletInit(_f);\n    return _f;\n  }();\n  var sharedHandlersCallbacks = Reanimated.useSharedValue(null);\n  var lastUpdateEvent = Reanimated.useSharedValue([]);\n  var stateControllers = [];\n  var callback = function () {\n    var _f = function _f(event) {\n      var currentCallback = sharedHandlersCallbacks.value;\n      if (!currentCallback) {\n        return;\n      }\n      for (var i = 0; i < currentCallback.length; i++) {\n        var gesture = currentCallback[i];\n        if (event.handlerTag === gesture.handlerTag) {\n          if (isStateChangeEvent(event)) {\n            if (event.oldState === State.UNDETERMINED && event.state === State.BEGAN) {\n              runWorklet(CALLBACK_TYPE.BEGAN, gesture, event);\n            } else if ((event.oldState === State.BEGAN || event.oldState === State.UNDETERMINED) && event.state === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.START, gesture, event);\n              lastUpdateEvent.value[gesture.handlerTag] = undefined;\n            } else if (event.oldState !== event.state && event.state === State.END) {\n              if (event.oldState === State.ACTIVE) {\n                runWorklet(CALLBACK_TYPE.END, gesture, event, true);\n              }\n              runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, true);\n            } else if ((event.state === State.FAILED || event.state === State.CANCELLED) && event.state !== event.oldState) {\n              if (event.oldState === State.ACTIVE) {\n                runWorklet(CALLBACK_TYPE.END, gesture, event, false);\n              }\n              runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, false);\n            }\n          } else if (isTouchEvent(event)) {\n            if (!stateControllers[i]) {\n              stateControllers[i] = GestureStateManager.create(event.handlerTag);\n            }\n            if (event.eventType !== EventType.UNDETERMINED) {\n              runWorklet(touchEventTypeToCallbackType(event.eventType), gesture, event, stateControllers[i]);\n            }\n          } else {\n            runWorklet(CALLBACK_TYPE.UPDATE, gesture, event);\n            if (gesture.onChange && gesture.changeEventCalculator) {\n              var _gesture$changeEventC;\n              runWorklet(CALLBACK_TYPE.CHANGE, gesture, (_gesture$changeEventC = gesture.changeEventCalculator) === null || _gesture$changeEventC === void 0 ? void 0 : _gesture$changeEventC.call(gesture, event, lastUpdateEvent.value[gesture.handlerTag]));\n              lastUpdateEvent.value[gesture.handlerTag] = event;\n            }\n          }\n        }\n      }\n    };\n    _f._closure = {\n      sharedHandlersCallbacks: sharedHandlersCallbacks,\n      isStateChangeEvent: isStateChangeEvent,\n      State: {\n        UNDETERMINED: State.UNDETERMINED,\n        BEGAN: State.BEGAN,\n        ACTIVE: State.ACTIVE,\n        END: State.END,\n        FAILED: State.FAILED,\n        CANCELLED: State.CANCELLED\n      },\n      runWorklet: runWorklet,\n      CALLBACK_TYPE: {\n        BEGAN: CALLBACK_TYPE.BEGAN,\n        START: CALLBACK_TYPE.START,\n        END: CALLBACK_TYPE.END,\n        FINALIZE: CALLBACK_TYPE.FINALIZE,\n        UPDATE: CALLBACK_TYPE.UPDATE,\n        CHANGE: CALLBACK_TYPE.CHANGE\n      },\n      lastUpdateEvent: lastUpdateEvent,\n      isTouchEvent: isTouchEvent,\n      stateControllers: stateControllers,\n      GestureStateManager: {\n        create: GestureStateManager.create\n      },\n      EventType: {\n        UNDETERMINED: EventType.UNDETERMINED\n      },\n      touchEventTypeToCallbackType: touchEventTypeToCallbackType\n    };\n    _f.asString = \"function _f(event){const{sharedHandlersCallbacks,isStateChangeEvent,State,runWorklet,CALLBACK_TYPE,lastUpdateEvent,isTouchEvent,stateControllers,GestureStateManager,EventType,touchEventTypeToCallbackType}=jsThis._closure;{var currentCallback=sharedHandlersCallbacks.value;if(!currentCallback){return;}for(var i=0;i<currentCallback.length;i++){var gesture=currentCallback[i];if(event.handlerTag===gesture.handlerTag){if(isStateChangeEvent(event)){if(event.oldState===State.UNDETERMINED&&event.state===State.BEGAN){runWorklet(CALLBACK_TYPE.BEGAN,gesture,event);}else if((event.oldState===State.BEGAN||event.oldState===State.UNDETERMINED)&&event.state===State.ACTIVE){runWorklet(CALLBACK_TYPE.START,gesture,event);lastUpdateEvent.value[gesture.handlerTag]=undefined;}else if(event.oldState!==event.state&&event.state===State.END){if(event.oldState===State.ACTIVE){runWorklet(CALLBACK_TYPE.END,gesture,event,true);}runWorklet(CALLBACK_TYPE.FINALIZE,gesture,event,true);}else if((event.state===State.FAILED||event.state===State.CANCELLED)&&event.state!==event.oldState){if(event.oldState===State.ACTIVE){runWorklet(CALLBACK_TYPE.END,gesture,event,false);}runWorklet(CALLBACK_TYPE.FINALIZE,gesture,event,false);}}else if(isTouchEvent(event)){if(!stateControllers[i]){stateControllers[i]=GestureStateManager.create(event.handlerTag);}if(event.eventType!==EventType.UNDETERMINED){runWorklet(touchEventTypeToCallbackType(event.eventType),gesture,event,stateControllers[i]);}}else{runWorklet(CALLBACK_TYPE.UPDATE,gesture,event);if(gesture.onChange&&gesture.changeEventCalculator){var _gesture$changeEventC;runWorklet(CALLBACK_TYPE.CHANGE,gesture,(_gesture$changeEventC=gesture.changeEventCalculator)===null||_gesture$changeEventC===void 0?void 0:_gesture$changeEventC.call(gesture,event,lastUpdateEvent.value[gesture.handlerTag]));lastUpdateEvent.value[gesture.handlerTag]=event;}}}}}}\";\n    _f.__workletHash = 6181785502571;\n    _f.__location = \"C:\\\\Users\\\\GGPC\\\\Documents\\\\kidsgram-web\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\GestureDetector.js (245:19)\";\n    global.__reanimatedWorkletInit(_f);\n    return _f;\n  }();\n  var event = Reanimated.useEvent(callback, ['onGestureHandlerStateChange', 'onGestureHandlerEvent'], true);\n  preparedGesture.animatedEventHandler = event;\n  preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n}\nexport var GestureDetector = function GestureDetector(props) {\n  var _gestureConfig$toGest, _gestureConfig$toGest2;\n  var gestureConfig = props.gesture;\n  var gesture = (_gestureConfig$toGest = gestureConfig === null || gestureConfig === void 0 ? void 0 : (_gestureConfig$toGest2 = gestureConfig.toGestureArray) === null || _gestureConfig$toGest2 === void 0 ? void 0 : _gestureConfig$toGest2.call(gestureConfig)) !== null && _gestureConfig$toGest !== void 0 ? _gestureConfig$toGest : [];\n  var useAnimated = gesture.find(function (gesture) {\n    return gesture.handlers.isWorklet.reduce(function (prev, current) {\n      return prev || current;\n    });\n  }) != null;\n  var viewRef = useRef(null);\n  var firstRenderRef = useRef(true);\n  var preparedGesture = React.useRef({\n    config: gesture,\n    animatedEventHandler: null,\n    animatedHandlers: null,\n    firstExecution: true,\n    useAnimated: useAnimated\n  }).current;\n  if (useAnimated !== preparedGesture.useAnimated) {\n    throw new Error('You cannot change whether you are using gesture or animatedGesture while the app is running');\n  }\n  if (preparedGesture.firstExecution) {\n    var _gestureConfig$initia;\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : (_gestureConfig$initia = gestureConfig.initialize) === null || _gestureConfig$initia === void 0 ? void 0 : _gestureConfig$initia.call(gestureConfig);\n  }\n  if (useAnimated) {\n    useAnimatedGesture(preparedGesture);\n  }\n  useEffect(function () {\n    firstRenderRef.current = true;\n    var viewTag = findNodeHandle(viewRef.current);\n    attachHandlers({\n      preparedGesture: preparedGesture,\n      gestureConfig: gestureConfig,\n      gesture: gesture,\n      viewTag: viewTag,\n      useAnimated: useAnimated\n    });\n    return function () {\n      dropHandlers(preparedGesture);\n    };\n  }, []);\n  useEffect(function () {\n    if (!firstRenderRef.current) {\n      var viewTag = findNodeHandle(viewRef.current);\n      if (needsToReattach(preparedGesture, gesture)) {\n        dropHandlers(preparedGesture);\n        attachHandlers({\n          preparedGesture: preparedGesture,\n          gestureConfig: gestureConfig,\n          gesture: gesture,\n          viewTag: viewTag,\n          useAnimated: useAnimated\n        });\n      } else {\n        updateHandlers(preparedGesture, gestureConfig, gesture);\n      }\n    } else {\n      firstRenderRef.current = false;\n    }\n  }, [props]);\n  if (useAnimated) {\n    return React.createElement(AnimatedWrap, {\n      ref: viewRef,\n      onGestureHandlerEvent: preparedGesture.animatedEventHandler\n    }, props.children);\n  } else {\n    return React.createElement(Wrap, {\n      ref: viewRef\n    }, props.children);\n  }\n};\nvar Wrap = function (_React$Component) {\n  _inherits(Wrap, _React$Component);\n  var _super = _createSuper(Wrap);\n  function Wrap() {\n    _classCallCheck(this, Wrap);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Wrap, [{\n    key: \"render\",\n    value: function render() {\n      var child = React.Children.only(this.props.children);\n      return React.cloneElement(child, {\n        collapsable: false\n      }, child.props.children);\n    }\n  }]);\n  return Wrap;\n}(React.Component);\nvar AnimatedWrap = (_Reanimated$default$c = Reanimated === null || Reanimated === void 0 ? void 0 : (_Reanimated$default = Reanimated.default) === null || _Reanimated$default === void 0 ? void 0 : _Reanimated$default.createAnimatedComponent(Wrap)) !== null && _Reanimated$default$c !== void 0 ? _Reanimated$default$c : Wrap;","map":{"version":3,"names":["React","useEffect","useRef","BaseGesture","CALLBACK_TYPE","Reanimated","registerHandler","unregisterHandler","RNGestureHandlerModule","baseGestureHandlerWithMonitorProps","filterConfig","findNodeHandle","GestureStateManager","flingGestureHandlerProps","forceTouchGestureHandlerProps","longPressGestureHandlerProps","panGestureHandlerProps","panGestureHandlerCustomNativeProps","tapGestureHandlerProps","State","EventType","ALLOWED_PROPS","concat","_toConsumableArray","convertToHandlerTag","ref","handlerTag","_ref$current$handlerT","_ref$current","current","extractValidHandlerTags","interactionGroup","_interactionGroup$map","_interactionGroup$map2","map","filter","tag","dropHandlers","preparedGesture","_iterator","_createForOfIteratorHelperLoose","config","_step","done","handler","value","dropGestureHandler","attachHandlers","_ref","gestureConfig","gesture","viewTag","useAnimated","firstExecution","initialize","setImmediate","prepare","_loop","createGestureHandler","handlerName","requireToFail","simultaneousWith","updateGestureHandler","simultaneousHandlers","waitFor","_iterator2","_step2","_iterator3","_step3","attachGestureHandler","animatedHandlers","g","handlers","updateHandlers","i","length","needsToReattach","useAnimatedGesture","isStateChangeEvent","_f","event","oldState","_closure","asString","__workletHash","__location","global","__reanimatedWorkletInit","isTouchEvent","eventType","getHandler","type","BEGAN","onBegin","START","onStart","UPDATE","onUpdate","CHANGE","onChange","END","onEnd","FINALIZE","onFinalize","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","touchEventTypeToCallbackType","UNDEFINED","runWorklet","isWorklet","_len","arguments","args","Array","_key","apply","console","warn","sharedHandlersCallbacks","useSharedValue","lastUpdateEvent","stateControllers","callback","currentCallback","UNDETERMINED","state","ACTIVE","undefined","FAILED","CANCELLED","create","changeEventCalculator","_gesture$changeEventC","call","useEvent","animatedEventHandler","GestureDetector","props","_gestureConfig$toGest","_gestureConfig$toGest2","toGestureArray","find","reduce","prev","viewRef","firstRenderRef","Error","_gestureConfig$initia","createElement","AnimatedWrap","onGestureHandlerEvent","children","Wrap","_React$Component","_inherits","_super","_createSuper","_classCallCheck","_createClass","key","render","child","Children","only","cloneElement","collapsable","Component","_Reanimated$default$c","_Reanimated$default","default","createAnimatedComponent"],"sources":["C:\\Users\\GGPC\\Documents\\kidsgram-web\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\gestures\\GestureDetector.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport {\n  GestureType,\n  HandlerCallbacks,\n  BaseGesture,\n  GestureRef,\n  CALLBACK_TYPE,\n} from './gesture';\nimport { Reanimated, SharedValue } from './reanimatedWrapper';\nimport { registerHandler, unregisterHandler } from '../handlersRegistry';\nimport RNGestureHandlerModule from '../../RNGestureHandlerModule';\nimport {\n  baseGestureHandlerWithMonitorProps,\n  filterConfig,\n  findNodeHandle,\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport {\n  GestureStateManager,\n  GestureStateManagerType,\n} from './gestureStateManager';\nimport { flingGestureHandlerProps } from '../FlingGestureHandler';\nimport { forceTouchGestureHandlerProps } from '../ForceTouchGestureHandler';\nimport { longPressGestureHandlerProps } from '../LongPressGestureHandler';\nimport {\n  panGestureHandlerProps,\n  panGestureHandlerCustomNativeProps,\n} from '../PanGestureHandler';\nimport { tapGestureHandlerProps } from '../TapGestureHandler';\nimport { State } from '../../State';\nimport { EventType } from '../../EventType';\nimport { ComposedGesture } from './gestureComposition';\n\nconst ALLOWED_PROPS = [\n  ...baseGestureHandlerWithMonitorProps,\n  ...tapGestureHandlerProps,\n  ...panGestureHandlerProps,\n  ...panGestureHandlerCustomNativeProps,\n  ...longPressGestureHandlerProps,\n  ...forceTouchGestureHandlerProps,\n  ...flingGestureHandlerProps,\n];\n\nexport type GestureConfigReference = {\n  config: GestureType[];\n  animatedEventHandler: unknown;\n  animatedHandlers: SharedValue<\n    HandlerCallbacks<Record<string, unknown>>[] | null\n  > | null;\n  firstExecution: boolean;\n  useAnimated: boolean;\n};\n\nfunction convertToHandlerTag(ref: GestureRef): number {\n  if (typeof ref === 'number') {\n    return ref;\n  } else if (ref instanceof BaseGesture) {\n    return ref.handlerTag;\n  } else {\n    // @ts-ignore in this case it should be a ref either to gesture object or\n    // a gesture handler component, in both cases handlerTag property exists\n    return ref.current?.handlerTag ?? -1;\n  }\n}\n\nfunction extractValidHandlerTags(interactionGroup: GestureRef[] | undefined) {\n  return (\n    interactionGroup?.map(convertToHandlerTag)?.filter((tag) => tag > 0) ?? []\n  );\n}\n\nfunction dropHandlers(preparedGesture: GestureConfigReference) {\n  for (const handler of preparedGesture.config) {\n    RNGestureHandlerModule.dropGestureHandler(handler.handlerTag);\n\n    unregisterHandler(handler.handlerTag);\n  }\n}\n\ninterface AttachHandlersConfig {\n  preparedGesture: GestureConfigReference;\n  gestureConfig: ComposedGesture | GestureType | undefined;\n  gesture: GestureType[];\n  viewTag: number;\n  useAnimated: boolean;\n}\n\nfunction attachHandlers({\n  preparedGesture,\n  gestureConfig,\n  gesture,\n  viewTag,\n  useAnimated,\n}: AttachHandlersConfig) {\n  if (!preparedGesture.firstExecution) {\n    gestureConfig?.initialize();\n  } else {\n    preparedGesture.firstExecution = false;\n  }\n\n  // use setImmediate to extract handlerTags, because all refs should be initialized\n  // when it's ran\n  setImmediate(() => {\n    gestureConfig?.prepare();\n  });\n\n  for (const handler of gesture) {\n    RNGestureHandlerModule.createGestureHandler(\n      handler.handlerName,\n      handler.handlerTag,\n      filterConfig(handler.config, ALLOWED_PROPS)\n    );\n\n    registerHandler(handler.handlerTag, handler);\n\n    // use setImmediate to extract handlerTags, because all refs should be initialized\n    // when it's ran\n    setImmediate(() => {\n      let requireToFail: number[] = [];\n      if (handler.config.requireToFail) {\n        requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n      }\n\n      let simultaneousWith: number[] = [];\n      if (handler.config.simultaneousWith) {\n        simultaneousWith = extractValidHandlerTags(\n          handler.config.simultaneousWith\n        );\n      }\n\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(handler.config, ALLOWED_PROPS, {\n          simultaneousHandlers: simultaneousWith,\n          waitFor: requireToFail,\n        })\n      );\n    });\n  }\n  preparedGesture.config = gesture;\n\n  for (const gesture of preparedGesture.config) {\n    RNGestureHandlerModule.attachGestureHandler(\n      gesture.handlerTag,\n      viewTag,\n      !useAnimated // send direct events when using animatedGesture, device events otherwise\n    );\n  }\n\n  if (preparedGesture.animatedHandlers) {\n    preparedGesture.animatedHandlers.value = (gesture.map(\n      (g) => g.handlers\n    ) as unknown) as HandlerCallbacks<Record<string, unknown>>[];\n  }\n}\n\nfunction updateHandlers(\n  preparedGesture: GestureConfigReference,\n  gestureConfig: ComposedGesture | GestureType | undefined,\n  gesture: GestureType[]\n) {\n  gestureConfig?.prepare();\n\n  for (let i = 0; i < gesture.length; i++) {\n    const handler = preparedGesture.config[i];\n\n    gesture[i].handlerTag = handler.handlerTag;\n    gesture[i].handlers.handlerTag = handler.handlerTag;\n  }\n\n  // use setImmediate to extract handlerTags, because when it's ran, all refs should be updated\n  // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\n  // in case of external relations)\n  setImmediate(() => {\n    for (let i = 0; i < gesture.length; i++) {\n      const handler = preparedGesture.config[i];\n\n      handler.config = gesture[i].config;\n      handler.handlers = gesture[i].handlers;\n      handler.handlers.handlerTag = handler.handlerTag;\n\n      const requireToFail = extractValidHandlerTags(\n        handler.config.requireToFail\n      );\n\n      const simultaneousWith = extractValidHandlerTags(\n        handler.config.simultaneousWith\n      );\n\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(handler.config, ALLOWED_PROPS, {\n          simultaneousHandlers: simultaneousWith,\n          waitFor: requireToFail,\n        })\n      );\n\n      registerHandler(handler.handlerTag, handler);\n    }\n\n    if (preparedGesture.animatedHandlers) {\n      preparedGesture.animatedHandlers.value = (preparedGesture.config.map(\n        (g) => g.handlers\n      ) as unknown) as HandlerCallbacks<Record<string, unknown>>[];\n    }\n  });\n}\n\nfunction needsToReattach(\n  preparedGesture: GestureConfigReference,\n  gesture: GestureType[]\n) {\n  if (gesture.length !== preparedGesture.config.length) {\n    return true;\n  }\n  for (let i = 0; i < gesture.length; i++) {\n    if (gesture[i].handlerName !== preparedGesture.config[i].handlerName) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction useAnimatedGesture(preparedGesture: GestureConfigReference) {\n  if (!Reanimated) {\n    return;\n  }\n\n  function isStateChangeEvent(\n    event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n  ): event is GestureStateChangeEvent {\n    'worklet';\n    // @ts-ignore Yes, the oldState prop is missing on GestureTouchEvent, that's the point\n    return event.oldState != null;\n  }\n\n  function isTouchEvent(\n    event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n  ): event is GestureTouchEvent {\n    'worklet';\n    return event.eventType != null;\n  }\n\n  function getHandler(\n    type: CALLBACK_TYPE,\n    gesture: HandlerCallbacks<Record<string, unknown>>\n  ) {\n    'worklet';\n    switch (type) {\n      case CALLBACK_TYPE.BEGAN:\n        return gesture.onBegin;\n      case CALLBACK_TYPE.START:\n        return gesture.onStart;\n      case CALLBACK_TYPE.UPDATE:\n        return gesture.onUpdate;\n      case CALLBACK_TYPE.CHANGE:\n        return gesture.onChange;\n      case CALLBACK_TYPE.END:\n        return gesture.onEnd;\n      case CALLBACK_TYPE.FINALIZE:\n        return gesture.onFinalize;\n      case CALLBACK_TYPE.TOUCHES_DOWN:\n        return gesture.onTouchesDown;\n      case CALLBACK_TYPE.TOUCHES_MOVE:\n        return gesture.onTouchesMove;\n      case CALLBACK_TYPE.TOUCHES_UP:\n        return gesture.onTouchesUp;\n      case CALLBACK_TYPE.TOUCHES_CANCELLED:\n        return gesture.onTouchesCancelled;\n    }\n  }\n\n  function touchEventTypeToCallbackType(eventType: EventType): CALLBACK_TYPE {\n    'worklet';\n    switch (eventType) {\n      case EventType.TOUCHES_DOWN:\n        return CALLBACK_TYPE.TOUCHES_DOWN;\n      case EventType.TOUCHES_MOVE:\n        return CALLBACK_TYPE.TOUCHES_MOVE;\n      case EventType.TOUCHES_UP:\n        return CALLBACK_TYPE.TOUCHES_UP;\n      case EventType.TOUCHES_CANCELLED:\n        return CALLBACK_TYPE.TOUCHES_CANCELLED;\n    }\n    return CALLBACK_TYPE.UNDEFINED;\n  }\n\n  function runWorklet(\n    type: CALLBACK_TYPE,\n    gesture: HandlerCallbacks<Record<string, unknown>>,\n    event: GestureStateChangeEvent | GestureUpdateEvent | GestureTouchEvent,\n    ...args: any[]\n  ) {\n    'worklet';\n    const handler = getHandler(type, gesture);\n    if (gesture.isWorklet[type]) {\n      // @ts-ignore Logic below makes sure the correct event is send to the\n      // correct handler.\n      handler?.(event, ...args);\n    } else if (handler) {\n      console.warn('Animated gesture callback must be a worklet');\n    }\n  }\n\n  // Hooks are called conditionally, but the condition is whether the\n  // react-native-reanimated is installed, which shouldn't change while running\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const sharedHandlersCallbacks = Reanimated.useSharedValue<\n    HandlerCallbacks<Record<string, unknown>>[] | null\n  >(null);\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const lastUpdateEvent = Reanimated.useSharedValue<\n    (GestureUpdateEvent | undefined)[]\n  >([]);\n\n  // not every gesture needs a state controller, init them lazily\n  const stateControllers: GestureStateManagerType[] = [];\n\n  const callback = (\n    event: GestureStateChangeEvent | GestureUpdateEvent | GestureTouchEvent\n  ) => {\n    'worklet';\n\n    const currentCallback = sharedHandlersCallbacks.value;\n    if (!currentCallback) {\n      return;\n    }\n\n    for (let i = 0; i < currentCallback.length; i++) {\n      const gesture = currentCallback[i];\n\n      if (event.handlerTag === gesture.handlerTag) {\n        if (isStateChangeEvent(event)) {\n          if (\n            event.oldState === State.UNDETERMINED &&\n            event.state === State.BEGAN\n          ) {\n            runWorklet(CALLBACK_TYPE.BEGAN, gesture, event);\n          } else if (\n            (event.oldState === State.BEGAN ||\n              event.oldState === State.UNDETERMINED) &&\n            event.state === State.ACTIVE\n          ) {\n            runWorklet(CALLBACK_TYPE.START, gesture, event);\n            lastUpdateEvent.value[gesture.handlerTag] = undefined;\n          } else if (\n            event.oldState !== event.state &&\n            event.state === State.END\n          ) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, true);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, true);\n          } else if (\n            (event.state === State.FAILED || event.state === State.CANCELLED) &&\n            event.state !== event.oldState\n          ) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, false);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, false);\n          }\n        } else if (isTouchEvent(event)) {\n          if (!stateControllers[i]) {\n            stateControllers[i] = GestureStateManager.create(event.handlerTag);\n          }\n\n          if (event.eventType !== EventType.UNDETERMINED) {\n            runWorklet(\n              touchEventTypeToCallbackType(event.eventType),\n              gesture,\n              event,\n              stateControllers[i]\n            );\n          }\n        } else {\n          runWorklet(CALLBACK_TYPE.UPDATE, gesture, event);\n\n          if (gesture.onChange && gesture.changeEventCalculator) {\n            runWorklet(\n              CALLBACK_TYPE.CHANGE,\n              gesture,\n              gesture.changeEventCalculator?.(\n                event,\n                lastUpdateEvent.value[gesture.handlerTag]\n              )\n            );\n\n            lastUpdateEvent.value[gesture.handlerTag] = event;\n          }\n        }\n      }\n    }\n  };\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const event = Reanimated.useEvent(\n    callback,\n    ['onGestureHandlerStateChange', 'onGestureHandlerEvent'],\n    true\n  );\n\n  preparedGesture.animatedEventHandler = event;\n  preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n}\n\ninterface GestureDetectorProps {\n  gesture?: ComposedGesture | GestureType;\n}\nexport const GestureDetector: React.FunctionComponent<GestureDetectorProps> = (\n  props\n) => {\n  const gestureConfig = props.gesture;\n  const gesture = gestureConfig?.toGestureArray?.() ?? [];\n  const useAnimated =\n    gesture.find((gesture) =>\n      gesture.handlers.isWorklet.reduce((prev, current) => prev || current)\n    ) != null;\n  const viewRef = useRef(null);\n  const firstRenderRef = useRef(true);\n\n  const preparedGesture = React.useRef<GestureConfigReference>({\n    config: gesture,\n    animatedEventHandler: null,\n    animatedHandlers: null,\n    firstExecution: true,\n    useAnimated: useAnimated,\n  }).current;\n\n  if (useAnimated !== preparedGesture.useAnimated) {\n    throw new Error(\n      'You cannot change whether you are using gesture or animatedGesture while the app is running'\n    );\n  }\n\n  if (preparedGesture.firstExecution) {\n    gestureConfig?.initialize?.();\n  }\n\n  if (useAnimated) {\n    // Whether animatedGesture or gesture is used shouldn't change\n    // during while an app is running\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useAnimatedGesture(preparedGesture);\n  }\n\n  useEffect(() => {\n    firstRenderRef.current = true;\n    const viewTag = findNodeHandle(viewRef.current) as number;\n    attachHandlers({\n      preparedGesture,\n      gestureConfig,\n      gesture,\n      viewTag,\n      useAnimated,\n    });\n\n    return () => {\n      dropHandlers(preparedGesture);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!firstRenderRef.current) {\n      const viewTag = findNodeHandle(viewRef.current) as number;\n\n      if (needsToReattach(preparedGesture, gesture)) {\n        dropHandlers(preparedGesture);\n        attachHandlers({\n          preparedGesture,\n          gestureConfig,\n          gesture,\n          viewTag,\n          useAnimated,\n        });\n      } else {\n        updateHandlers(preparedGesture, gestureConfig, gesture);\n      }\n    } else {\n      firstRenderRef.current = false;\n    }\n  }, [props]);\n\n  if (useAnimated) {\n    return (\n      <AnimatedWrap\n        ref={viewRef}\n        onGestureHandlerEvent={preparedGesture.animatedEventHandler}>\n        {props.children}\n      </AnimatedWrap>\n    );\n  } else {\n    return <Wrap ref={viewRef}>{props.children}</Wrap>;\n  }\n};\n\nclass Wrap extends React.Component<{ onGestureHandlerEvent?: unknown }> {\n  render() {\n    // I don't think that fighting with types over such a simple function is worth it\n    // The only thing it does is add 'collapsable: false' to the child component\n    // to make sure it is in the native view hierarchy so the detector can find\n    // correct viewTag to attach to.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const child: any = React.Children.only(this.props.children);\n\n    return React.cloneElement(\n      child,\n      { collapsable: false },\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      child.props.children\n    );\n  }\n}\n\nconst AnimatedWrap = Reanimated?.default?.createAnimatedComponent(Wrap) ?? Wrap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}