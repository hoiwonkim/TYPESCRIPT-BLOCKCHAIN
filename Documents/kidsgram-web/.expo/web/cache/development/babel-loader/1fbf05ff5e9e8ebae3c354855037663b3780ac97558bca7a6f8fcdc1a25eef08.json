{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { onError } from \"@apollo/client/link/error\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { createUploadLink } from \"apollo-upload-client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { ApolloClient, createHttpLink, InMemoryCache, makeVar, split } from \"@apollo/client\";\nexport var isLoggedInVar = makeVar(false);\nexport var tokenVar = makeVar(\"\");\nexport var isDarkModeVar = makeVar(\"light\");\nexport var handleLogin = function handleLogin(token) {\n  var tokenData, isLoggedInData;\n  return _regeneratorRuntime.async(function handleLogin$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.prev = 0;\n        tokenData = [\"token\", token];\n        isLoggedInData = [\"isLoggedIn\", JSON.stringify(true)];\n        _context.next = 5;\n        return _regeneratorRuntime.awrap(AsyncStorage.multiSet([tokenData, isLoggedInData]));\n      case 5:\n        isLoggedInVar(true);\n        tokenVar(token);\n        _context.next = 12;\n        break;\n      case 9:\n        _context.prev = 9;\n        _context.t0 = _context[\"catch\"](0);\n        console.log(\"handleLogin error\");\n      case 12:\n      case \"end\":\n        return _context.stop();\n    }\n  }, null, null, [[0, 9]], Promise);\n};\nexport var handleLogout = function handleLogout() {\n  var keys;\n  return _regeneratorRuntime.async(function handleLogout$(_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.prev = 0;\n        keys = [\"token\", \"isLoggedIn\"];\n        _context2.next = 4;\n        return _regeneratorRuntime.awrap(AsyncStorage.multiRemove(keys));\n      case 4:\n        client.clearStore();\n        isLoggedInVar(false);\n        tokenVar(\"\");\n        _context2.next = 12;\n        break;\n      case 9:\n        _context2.prev = 9;\n        _context2.t0 = _context2[\"catch\"](0);\n        console.log(\"handleLogout error\");\n      case 12:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, null, null, [[0, 9]], Promise);\n};\nvar httpLink = createHttpLink({\n  uri: \"http://localhost:4000/graphql\"\n});\nvar authLink = setContext(function (_, _ref) {\n  var headers = _ref.headers;\n  return {\n    headers: _objectSpread(_objectSpread({}, headers), {}, {\n      token: tokenVar()\n    })\n  };\n});\nvar errorLink = onError(function (_ref2) {\n  var graphQLErrors = _ref2.graphQLErrors,\n    networkError = _ref2.networkError;\n  if (graphQLErrors) {\n    console.log(\"graphQLErrors\", graphQLErrors);\n  }\n  if (networkError) {\n    console.log(\"networkError\", networkError);\n  }\n});\nvar uploadHttpLink = createUploadLink({\n  uri: \"https://instagram-gw.herokuapp.com/graphql\"\n});\nvar uploadHttpLinks = authLink.concat(errorLink).concat(uploadHttpLink);\nvar wsLink = new WebSocketLink({\n  uri: \"ws://instagram-gw.herokuapp.com/graphql\",\n  options: {\n    reconnect: true,\n    connectionParams: function connectionParams() {\n      return {\n        token: tokenVar()\n      };\n    }\n  }\n});\nvar splitLink = split(function (_ref3) {\n  var query = _ref3.query;\n  var definition = getMainDefinition(query);\n  var isSubscription = definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n  return isSubscription;\n}, wsLink, uploadHttpLinks);\nexport var cache = new InMemoryCache({\n  typePolicies: {\n    Query: {\n      fields: {\n        seeFeed: {\n          keyArgs: false,\n          merge: function merge(existing, incoming) {\n            if (existing) {\n              var result = _objectSpread(_objectSpread(_objectSpread({}, existing), incoming), {}, {\n                photos: [].concat(_toConsumableArray(existing.photos), _toConsumableArray(incoming.photos))\n              });\n              return result;\n            }\n            return incoming;\n          }\n        }\n      }\n    }\n  }\n});\nvar client = new ApolloClient({\n  link: splitLink,\n  cache: cache\n});\nexport default client;","map":{"version":3,"names":["AsyncStorage","onError","WebSocketLink","createUploadLink","setContext","getMainDefinition","ApolloClient","createHttpLink","InMemoryCache","makeVar","split","isLoggedInVar","tokenVar","isDarkModeVar","handleLogin","token","tokenData","isLoggedInData","_regeneratorRuntime","async","handleLogin$","_context","prev","next","JSON","stringify","awrap","multiSet","t0","console","log","stop","Promise","handleLogout","keys","handleLogout$","_context2","multiRemove","client","clearStore","httpLink","uri","authLink","_","_ref","headers","_objectSpread","errorLink","_ref2","graphQLErrors","networkError","uploadHttpLink","uploadHttpLinks","concat","wsLink","options","reconnect","connectionParams","splitLink","_ref3","query","definition","isSubscription","kind","operation","cache","typePolicies","Query","fields","seeFeed","keyArgs","merge","existing","incoming","result","photos","_toConsumableArray","link"],"sources":["C:/Users/GGPC/Documents/kidsgram-web/apollo.ts"],"sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { createClient } from \"graphql-ws\";\r\nimport { onError } from \"@apollo/client/link/error\";\r\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\r\nimport { createUploadLink } from \"apollo-upload-client\";\r\nimport { setContext } from \"@apollo/client/link/context\";\r\nimport { GraphQLWsLink } from \"@apollo/client/link/subscriptions\";\r\nimport { FragmentDefinitionNode, OperationDefinitionNode } from \"graphql\";\r\nimport { getMainDefinition, offsetLimitPagination } from \"@apollo/client/utilities\";\r\nimport { ApolloClient, ApolloLink, createHttpLink, InMemoryCache, makeVar, NormalizedCacheObject, split } from \"@apollo/client\";\r\n\r\nexport const isLoggedInVar = makeVar<boolean>(false);\r\nexport const tokenVar = makeVar<string>(\"\");\r\nexport const isDarkModeVar = makeVar<\"light\" | \"dark\">(\"light\");\r\n\r\nexport const handleLogin = async (token: string): Promise<void> => {\r\n  try {\r\n    const tokenData: string[] = [\"token\", token];\r\n    const isLoggedInData: string[] = [\"isLoggedIn\", JSON.stringify(true)];\r\n    await AsyncStorage.multiSet([tokenData, isLoggedInData]);\r\n    isLoggedInVar(true);\r\n    tokenVar(token);\r\n  } catch (error) {\r\n    console.log(\"handleLogin error\");\r\n  }\r\n};\r\n\r\nexport const handleLogout = async (): Promise<void> => {\r\n  try {\r\n    const keys: string[] = [\"token\", \"isLoggedIn\"];\r\n    await AsyncStorage.multiRemove(keys);\r\n    client.clearStore();\r\n    isLoggedInVar(false);\r\n    tokenVar(\"\");\r\n  } catch (error) {\r\n    console.log(\"handleLogout error\");\r\n  }\r\n};\r\n\r\nconst httpLink: ApolloLink = createHttpLink({\r\n  uri: \"http://localhost:4000/graphql\",\r\n});\r\n\r\nconst authLink: ApolloLink = setContext((_, { headers }) => {\r\n  return { headers: { ...headers, token: tokenVar() } };\r\n});\r\n\r\nconst errorLink: ApolloLink = onError(({ graphQLErrors, networkError }) => {\r\n  if (graphQLErrors) {\r\n    console.log(\"graphQLErrors\", graphQLErrors);\r\n  }\r\n  if (networkError) {\r\n    console.log(\"networkError\", networkError);\r\n  }\r\n});\r\n\r\nconst uploadHttpLink: ApolloLink = createUploadLink({\r\n  uri: \"https://instagram-gw.herokuapp.com/graphql\",\r\n});\r\n\r\nconst uploadHttpLinks: ApolloLink = authLink.concat(errorLink).concat(uploadHttpLink);\r\n\r\n/* GraphQLWsLink\r\nconst wsLink: GraphQLWsLink = new GraphQLWsLink(\r\n  createClient({\r\n    url: \"ws://instagram-gw.herokuapp.com/graphql\",\r\n    connectionParams: () => ({\r\n      token: tokenVar(),\r\n    }),\r\n  })\r\n);\r\n*/\r\n\r\nconst wsLink = new WebSocketLink({\r\n  uri: \"ws://instagram-gw.herokuapp.com/graphql\",\r\n  options: {\r\n    reconnect: true,\r\n    connectionParams: () => ({\r\n      token: tokenVar(),\r\n    }),\r\n  },\r\n});\r\n\r\nconst splitLink = split(\r\n  ({ query }) => {\r\n    const definition: OperationDefinitionNode | FragmentDefinitionNode = getMainDefinition(query);\r\n    const isSubscription: boolean = definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\r\n    return isSubscription;\r\n  },\r\n  wsLink,\r\n  uploadHttpLinks\r\n);\r\n\r\nexport const cache = new InMemoryCache({\r\n  typePolicies: {\r\n    Query: {\r\n      fields: {\r\n        seeFeed: {\r\n          keyArgs: false,\r\n          merge(existing, incoming) {\r\n            if (existing) {\r\n              const result = { ...existing, ...incoming, photos: [...existing.photos, ...incoming.photos] };\r\n              return result;\r\n            }\r\n            return incoming;\r\n          },\r\n        },\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nconst client: ApolloClient<NormalizedCacheObject> = new ApolloClient({\r\n  link: splitLink,\r\n  cache,\r\n});\r\n\r\nexport default client;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}